<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Coding Stories]]></title><description><![CDATA[Singe savant en ingénierie logicielle]]></description><link>https://jcsirot.github.io/hubpress.io</link><image><url>images/cover/cover.jpg</url><title>Coding Stories</title><link>https://jcsirot.github.io/hubpress.io</link></image><generator>RSS for Node</generator><lastBuildDate>Mon, 18 Jul 2016 14:50:46 GMT</lastBuildDate><atom:link href="https://jcsirot.github.io/hubpress.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Continuous Delivery with Jenkins workflow and Docker]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Recently Cloudbees releases the <a href="https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Workflow+Plugin">CloudBees Docker Workflow Plugin</a> to make the integration of Docker with Jenkins workflows as easy as possible. Now, deploying a continuous delivery pipeline is (almost) straightforward. Here is a simple but comprehensive example.</p>
</div>
<div class="paragraph">
<p><em>Disclaimer</em>: I&#8217;m using a maven project for this example because maven is a tool I&#8217;m comfortable with. This post could be adapted to python, rails or whatever-you-want project with minor efforts.</p>
</div>
<div class="paragraph">
<p>First of all, we need to install the required plugins in Jenkins:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Workflow: Aggregator</p>
</li>
<li>
<p>CloudBees Docker Workflow</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This sample workflow is simple and composed of 4 steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Build and unit tests</p>
</li>
<li>
<p>Build Docker image</p>
</li>
<li>
<p>Acceptance Tests</p>
</li>
<li>
<p>Push Docker image</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_and_unit_tests">Build and unit tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In a new Workflow job enter this script:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* Configure the JDK to use. 'JDK8' is the symbolic name under which the JDK
     * is defined in the global Jenkins configuration. */
    env.JAVA_HOME="${tool 'JDK8'}"

    stage 'Build'
    /* Clone the project from github */
    git url: 'https://github.com/jcsirot/atmosphere-calculator.git', branch: '0.1.0'
    /* Select the maven configuration. 'M3' is the symbolic name used the
     * global Jenkins configuration. */
    def mvnHome = tool "M3"
    /* Run maven: build and run the unit tests  */
    sh "${mvnHome}/bin/mvn clean package"
    /* This is the syntax for using a generic step. Here the test results are archived. */
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This short script runs maven to build the jars and to execute the unit tests. Now we are ready to build the Docker image.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_docker_image">Build Docker image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The CloudBees Docker Workflow Plugin provides a global variable <code>docker</code> which offers access to the common Docker functions in workflow scripts. For a comprehensive description of the plugin and the available commands, look at the <a href="http://documentation.cloudbees.com/docs/cje-user-guide/docker-workflow.html">plugin guide</a>.</p>
</div>
<div class="paragraph">
<p>To build the image we call <code>build</code> on the <code>docker</code> variable. Two parameters are passed: the image name (with the Docker notation <code>[registry/]image[:tag]</code>) and the directory where is located the <code>Dockerfile</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Build Docker image'
    def image = docker.build('jcsirot/atmo-calc:snapshot', '.')
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The call returns a handle on the built image so we can work with it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_acceptance_tests">Acceptance Tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In order to execute the acceptance tests we wants to run a container from our newly built image. The <code>withRun</code> method can be invoked on the image handle. It is possible to pass the <code>docker run</code> parameters like port mapping or volumes configuration.</p>
</div>
<div class="paragraph">
<p><code>withRun</code> also takes a code block. The container is started at the begining of the block, then the code in the block is executed and the container is stopped at the end of the block. Note that the block is executed on the Jenkins node, <em>not inside the container</em>. Use the <code>inside</code> method on the image handle to execute code inside the container.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Acceptance Tests'
    image.withRun('-p 8181:8181') {c -&gt;
        sh "${mvnHome}/bin/mvn verify"
    }
    /* Archive acceptance tests results */
    step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_push_docker_image">Push Docker image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The last step consists in pushing the image to a Docker registry. It can be done with the method <code>push</code>.</p>
</div>
<div class="paragraph">
<p>In order to configure the registry credentials, go the Jenkins Manager Credentials page. Add a new username/password entry and enter your registry login and password. Click on <em>Advanced</em> to show the ID field and enter a unique identifier.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/jenkins-docker-credentials-20150823.png" alt="Docker Hub Credentials">
</div>
</div>
<div class="paragraph">
<p>The <code>withRegistry</code> method is also used to pass the registry URL and credentials ID configure above.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Push image'
    docker.withRegistry("https://registry.hub.docker.com", "docker-registry") {
        image.push()
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The image is pushed and, unless you pushed it to a custom registry, should be available on the <a href="https://hub.docker.com/">Docker hub</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_s_next">What&#8217;s next?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This example is simple and far from being perfect. Feel free to share suggestions or questions in the comments.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The project I used for this sample: <a href="https://github.com/jcsirot/atmosphere-calculator">https://github.com/jcsirot/atmosphere-calculator</a></p>
</li>
<li>
<p>The workflow script: <a href="https://gist.github.com/jcsirot/4de001d280998f27aa82">https://gist.github.com/jcsirot/4de001d280998f27aa82</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2015/08/23/Continuous-Delivery-with-Jenkins-workflow-and-Docker.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2015/08/23/Continuous-Delivery-with-Jenkins-workflow-and-Docker.html</guid><category><![CDATA[Continuous Delivery]]></category><category><![CDATA[ Jenkins]]></category><category><![CDATA[ Jenkins workflow]]></category><category><![CDATA[ maven]]></category><category><![CDATA[ Docker]]></category><category><![CDATA[ devops]]></category><category><![CDATA[ test]]></category><category><![CDATA[ en]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 23 Aug 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les classes internes ou la tambouille du compilateur Java]]></title><description><![CDATA[<div class="paragraph">
<p>Il y a quelques mois Olivier Croisier a publié sur son blog <a href="http://thecodersbreakfast.net/">The Coder’s Breakfast</a> (que tout développeur Java se doit de suivre) un article intitulé <a href="http://thecodersbreakfast.net/index.php?post/2011/09/26/Inner-classes-and-the-myth-of-the-default-constructor">Inner classes and the myth of the default constructor</a>. Dans cet article il est question des classes internes et des constructeurs « cachés » ajoutés lors de la phase de compilation.</p>
</div>
<div class="paragraph">
<p>Prenons ce morceau de code :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        new Inner();
    }
    public class Inner {}
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et regardons le bytecode des constructeurs généré par le compilateur :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: pop
   13: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return</pre>
</div>
</div>
<div class="paragraph">
<p>La class <code>Inner</code> s’est vue ajouter un constructeur qui prend un paramètre de type <code>Outer</code> et quand <code>Outer</code> appelle ce constructeur il passe this en paramètre (l’instruction <code>aload $0</code> charge <code>this</code> sur la pile juste avant l’appel du constructeur).</p>
</div>
<div class="paragraph">
<p>En fait la classe interne est vue comme n’importe quelle autre classe. Pour lui permettre d’accès à la classe englobante il lui faut un pointeur vers l’instance de cette classe. Ce pointeur lui est passé en paramètre dans un constructeur ajouté à la compilation.</p>
</div>
<div class="paragraph">
<p>Allons un peu plus loin. Si la classe interne n’est pas différente des autres classes alors que ce passe-t-il quand la classe englobante veut accéder à une méthode <code>private</code> de la classe interne ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
        inner.hello();
    }
    public class Inner {
        private void hello() {
            System.out.println("Hello World");
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et le bytecode :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: astore $1
   13: aload $1
   14: invokestatic Outer$Inner.access$000 {(Outer$Inner) -&gt; void}
   17: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return

**** hello () -&gt; void
    0: getstatic java/lang/System.out {java.io.PrintStream}
    3: ldc "Hello World"
    5: invokevirtual java/io/PrintStream.println {(java.lang.String) -&gt; void}
    8: return

**** access$000 (Outer$Inner) -&gt; void
    0: aload $0
    1: invokespecial Outer$Inner.hello {() -&gt; void}
    4: return</code></pre>
</div>
</div>
<div class="paragraph">
<p>La méthode <code>hello</code> est privée et donc Outer ne peut pas l&#8217;appeler directement. Dans ce le compilateur a ajouté une méthode package statique void <code>access$000(Inner)</code> qui sert alors de proxy. Cette méthode se contente alors de rediriger l&#8217;appel vers le méthode <code>hello</code>. Dans le code de l&#8217;appelant l&#8217;appel à la méthode privée est simplement remplacé par un appel à la méthode statique correspondante.</p>
</div>
<div class="paragraph">
<p>Dans le cas de l&#8217;accès à un champ privé, le résultat est très similaire :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
        String hello = inner.hello;
    }
    public class Inner {
        private String hello = "Hello World";
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: astore $1
   13: aload $1
   14: invokestatic Outer$Inner.access$000 {(Outer$Inner) -&gt; java.lang.String}
   17: astore $2
   18: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: aload $0
   10: ldc "Hello World"
   12: putfield Outer$Inner.hello {java.lang.String}
   15: return

**** access$000 (Outer$Inner) -&gt; java.lang.String
    0: aload $0
    1: getfield Outer$Inner.hello {java.lang.String}
    4: areturn</code></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce cas aussi, l&#8217;accès au champ privé <code>hello</code> n&#8217;est pas possible directement. Le compiltateur a donc ajouté une méthode package statique <code>String access$000(Inner)</code> qui lit le champ (opcode <code>getfield</code>) et le renvoie à l&#8217;appelant.</p>
</div>
<div class="paragraph">
<p>Et dans le cas d&#8217;un constructeur privé ? Vat-t-on se retrouver avec une méthode statique de type <em>factory</em> qui va instancier l&#8217;object qu&#8217;on cherche à construire ? Non, ici le compilateur opte pour une autre stratégie :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
    }
    public class Inner {
        private Inner() {}
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: aconst_null
   10: invokespecial Outer$Inner.&lt;init&gt; {(Outer, Outer$1) -&gt; void}
   13: astore $1
   14: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return

**** &lt;init&gt; (Outer, Outer$1) -&gt; void
    0: aload $0
    1: aload $1
    2: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
    5: return</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le compilateur ajoute un second constructeur qui prend deux paramètres : le pointeur vers l&#8217;instance de la classe englobante et un paramètre de type <code>Outer$1</code>. Quelle est ce type ? Il s&#8217;agit d&#8217;une interface sans méthode créée automatiquement à la compilation. Cette interface sert simplement différencier les deux constructeurs (le second constructeur se contente d&#8217;appeler le premier). Lors de l&#8217;appel de ce constructeur ce second paramètre est mis à null (<code>null</code> est chargé sur la pile par l&#8217;opcode <code>aconst_null</code>).</p>
</div>
<div class="paragraph">
<p>Le problème principal de ces différentes <em>ruses</em> du compilateur est que cela peut rendre les stacktraces difficilement lisibles si on fait un usage immodéré des classes internes. Il vaut mieux également éviter d&#8217;appeler des méthodes privées depuis la classe englobante. L&#8217;analyseur de code <a href="http://pmd.sourceforge.net/">PMD</a> définit d&#8217;ailleurs une règle <a href="http://pmd.sourceforge.net/rules/design.html">AccessorClassGeneration</a> qui lève une alerte quand un constructeur privé est appelé depuis la classe englobante.</p>
</div>
<div class="paragraph">
<p>Et que se passe-t-il si on tente d&#8217;accéder à une méthode privée de la classe englobante depuis la classe interne ? Je vous laisse expérimenter :D.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/12/26/Les-classes-internes-ou-la-tambouille-du-compilateur-Java.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/12/26/Les-classes-internes-ou-la-tambouille-du-compilateur-Java.html</guid><category><![CDATA[bytecode]]></category><category><![CDATA[ compiler]]></category><category><![CDATA[ java]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 26 Dec 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[La cryptographie à clé publique par ses inventeurs]]></title><description><![CDATA[<div class="paragraph">
<p><a href="http://fr.wikipedia.org/wiki/Ronald_Rivest">Ron Rivest</a>, <a href="http://fr.wikipedia.org/wiki/Adi_Shamir">Adi Shamir</a>, <a href="http://fr.wikipedia.org/wiki/Leonard_Adleman">Leonard Adleman</a>, <a href="http://fr.wikipedia.org/wiki/Whitfield_Diffie">Whitfield Diffie</a>, <a href="http://fr.wikipedia.org/wiki/Martin_Hellman">Martin Hellman</a>, <a href="http://fr.wikipedia.org/wiki/Ralph_Merkle">Ralph Merkle</a>. Dans les années 70 en découvrant la cryptographie à clé publique ils ont révolutionné le monde. Télécommunications, commerce électronique, cartes bancaires, téléphonie mobile, VIGIK®… Nous utilisons tous et tous les jours leurs découvertes, souvent même sans le savoir.</p>
</div>
<div class="paragraph">
<p>Dans cette courte vidéo diffusée à l’ouverture de la <a href="http://www.rsaconference.com/2011/usa/">conférence RSA 2011</a>, les acteurs de cette révolution en racontent la genèse.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="480" src="https://www.youtube.com/embed/mvOsb9vNIWM?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/08/06/La-cryptographie-a-cle-publique-par-ses-inventeurs.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/08/06/La-cryptographie-a-cle-publique-par-ses-inventeurs.html</guid><category><![CDATA[cryptography]]></category><category><![CDATA[ RSA]]></category><category><![CDATA[ security]]></category><category><![CDATA[ video]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 06 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Conférence annotations java – compte rendu]]></title><description><![CDATA[<div class="paragraph">
<p>La conférence <em>Annotations Java</em> animée par Olivier Croisier, expert java et auteur du blog <a href="http://thecodersbreakfast.net/">The Coders Breakfast</a>, s’est tenue le 29 juin dernier a eu lieu la dans les locaux de <a href="http://www.zenika.com/">Zénika</a>.</p>
</div>
<div class="paragraph">
<p>Les annotations, je pensais bien connaitre… J’avais tort.</p>
</div>
<div class="paragraph">
<p>Après s’être présenté et avoir présenté Zénika, Olivier commence par un rappel historique : en matière de méta-programmation, il existait déjà l’API <a href="http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/">Doclets</a> qui permet d’ajouter ses propres tags dans les commentaires du code. Les développeurs ont vite détourné cette fonctionnalité, souvent pour permettre la génération automatique de code. A partir de Java 5 sont apparues les annotations.</p>
</div>
<div class="paragraph">
<p>Dans la bibliothèque Java standard on trouve finalement assez peu d’annotations : <code>@Override</code>, <code>@SuppressWarnings</code> et <code>@Deprecated</code> ainsi que quelques unes dans le package <code>java.lang.annotation</code> (des <em>meta-annotations</em>, c’est à dire des annotations que l’on place sur d’autres annotations comme <code>Target</code> ou <code>Retention). Avec Java 6, on en voit arriver d’autres dans les packages `javax.annotation</code> ou <code>javax.xml.bind.annotation</code>. Mais ce sont surtout les frameworks et autres standards qui font la part belle aux annotations : Hibernate, JPA, JDO, Spring, Guice, J2EE6&#8230;&#8203; Le plus souvent il s&#8217;agit de remplacer de longs fichiers de description en XML.</p>
</div>
<div class="paragraph">
<p>Ensuite Olivier nous a présenté la syntaxe et les règles d&#8217;usage des annotations : elles peuvent se placer partout et si on les voit souvent sur des classes, des interfaces ou des méthodes, il est aussi possible d&#8217;annoter les packages en utilisant un fichier <a href="http://java.sun.com/docs/books/jls/third_edition/html/packages.html">package-info.java</a>, les constructeurs, les champs et également les paramètres de méthodes. Les annotations peuvent être paramétrées et ces paramètres peuvent avoir des valeurs par défaut. Valeurs par défaut qui peuvent même être des expressions si tant est que cette expression est résolue à la compilation. Toutefois il existe deux limites : les paramètres des annotations ne peuvent être null (pourquoi ? Personne ne semble vraiment savoir) et on ne peut annoter un élément qu&#8217;avec une seule annotation d&#8217;un même type. Mais il exste une astuce pour contourner le problème : écrire des annotations qui prennent un tableau d&#8217;annotations en paramètre.</p>
</div>
<div class="paragraph">
<p>Puis on passe au développement d&#8217;annotations personnalisées.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public @interface MyAnnotation {
    String aString() default "FooBar";
    int aInteger() default 21 + 21;
}

@MyAnnotation(aString="An arbitrary String", aInteger=27)
public class MyAnnotedClass {
    /* .... */
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quand on a un unique paramètre dans l&#8217;annotation on peut simplifier un peu la syntaxe en nommant ce paramètre <code>value</code> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public @interface MyAnnotation {
    String value();
}

@MyAnnotation("Hello world")
public class MyAnnotedClass {
    /* .... */
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>On peut également annoter nos propres annotations avec les meta-annotations définies dans la bibliothèque standard :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Target</code> indique sur quels éléments on peut placer l&#8217;annotation (classes, méthodes&#8230;&#8203;). Par défaut on peut mettre une annotation partout.</p>
</li>
<li>
<p><code>Retention</code> indique la durée de vie de l&#8217;annotation : présence uniquement dans le code source, dans le bytecode de la classe ou également au runtime.</p>
</li>
<li>
<p><code>Documented</code> indique si l&#8217;annotation apparaitra dans la javadoc.</p>
</li>
<li>
<p>`Inherited indique si l&#8217;annotation est héritée par les sous-classes des classes ou elle est définie. Limitation : on ne peut pas hériter d&#8217;une annotation placée sur un interface en implémentant cette interface.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Finalement Olivier est passé à des exemples concrets d&#8217;utilisation des annotations.</p>
</div>
<div class="paragraph">
<p>D&#8217;abord à la compilation, les annotations permettent d'étendre les fonctionnalités du compilateur Java. Java 6 propose un mécanisme appelé <em>Pluggable Annotation Processing</em> qui permet de brancher ses propres modules dans le compilateur. Cela se passe dans les packages <code>javax.annotation</code> et <code>javax.annotation.processing</code>. Il suffit d'écire une implémentation de la classe <code>javax.annotation.processing.Processor</code> (ou étendre <code>AbstractProcessor</code>) et de la mettre dans le classpath du compilateur (les implementations de <code>Processor</code> sont découvertes par le compilateur en utilisant le <a href="http://www/docs/java/docs-1.6.0/api/index.html?java/util/ServiceLoader.html">mécanisme de chargement de service</a>). L&#8217;interface <code>Processor</code> permet d&#8217;accéder à l&#8217;<a href="http://fr.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> du code en cours de compilation. Une utilisation possible est la vérification programmatique de règles de design : s&#8217;assurer par exemple que toutes les classes d&#8217;un package annoté implémentent <code>Serializable</code> ou encore que toutes les classes annotées par un <code>@Loadable</code> possède bien une méthode <code>load</code> avec les bons paramètres.</p>
</div>
<div class="paragraph">
<p>Toutefois cette approche d&#8217;extension du compilateur a ses limites : il n&#8217;est pas possible de modifier le code existant (on ne peut qu&#8217;en générer) et certains bugs pouvant être bloquant trainent depuis longtemps (cela semble corrigé dans Java 7).</p>
</div>
<div class="paragraph">
<p>Second exemple, en runtime cette fois, la recherche d&#8217;annotations par introspection. Pour cela il ne faut pas oublier d&#8217;ajouter la méta-annotation <code>@Rentention(RententionPolicy.RUNTIME)</code> pour que celle-ci survive à l&#8217;exécution dans la JVM. Les cas d&#8217;utilisation tournent cette fois plus vers la programmation orientée <em>POJO</em> (plus besoin d&#8217;implémenter telle interface, on appelle les méthodes par introspection en recherchant celles qui sont annotées), le mapping d&#8217;objets java vers autre chose (par exemple java vers base de données avec JPA ou JDO) ou encore la configuration des frameworks (<code>@Inject</code> dans Guice par exemple).</p>
</div>
<div class="paragraph">
<p>En guise de dessert, Olivier nous a proposé une jolie demo d&#8217;injection d&#8217;annotation en runtime dans une classe. Il s&#8217;agit surtout d&#8217;une <em>proof of concept</em> et, de son propre aveux, il n&#8217;a pas trouvé de vrai use case à cela.</p>
</div>
<div class="paragraph">
<p>Les slides de la présentation et les exemples de code sont disponibles sur le <a href="http://blog.zenika.com/index.php?post/2010/07/05/Conf%C3%A9rence:-Les-annotations-enfin-expliqu%C3%A9es-simplement">blog de Zenika</a>.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/07/07/Conference-annotations-java-compte-rendu.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/07/07/Conference-annotations-java-compte-rendu.html</guid><category><![CDATA[conference]]></category><category><![CDATA[ java]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 07 Jul 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Android 2.1 tient la moitié du parc]]></title><description><![CDATA[<div class="paragraph">
<p>Nouvelle <a href="http://developer.android.com/resources/dashboard/platform-versions.html">mise à jour</a> bimensuelle de la part de Google concernant la répartition des différentes versions d’android :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/android_fragmentation-20100617.png" alt="Répartition des version Android" width="370">
</div>
</div>
<div class="paragraph">
<p>Cette fois, c’est fait, android 2.1 passe la barre des 50%. Toutefois il faudra compter avec le déploiement d’android 2.2, aka Froyo, dans les prochains mois (si ce n’est les prochaines semaines).</p>
</div>
<div class="paragraph">
<p>Et pendant ce temps les possesseurs du HTC Hero (dont fait partie votre serviteur) attendent avec une impatience non feinte la mise à jour vers la version 2.1. Elle a été promise, annoncée de nombreuses fois et reportée tout autant… Elle est maintenant prévue pour le 29 juin. J’attends…</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/06/26/Android-21-tient-la-moitie-du-parc.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/06/26/Android-21-tient-la-moitie-du-parc.html</guid><category><![CDATA[android]]></category><category><![CDATA[ google]]></category><category><![CDATA[ hero]]></category><category><![CDATA[ htc]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[jsChessboard 0.2 est disponible]]></title><description><![CDATA[<div class="paragraph">
<p>J’ai procédé à la release de la bibliothèque jsChessboard en version 0.2. jsChessboard est une bibliothèque qui permet d’interpréter des parties d’échecs et de dessiner des échiquiers, le tout entièrement en javascript en utilisant le tag <code>&lt;canvas&gt;</code>.</p>
</div>
<div class="paragraph">
<p>Les objectifs fixés pour la version 0.3 :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>fournir un plugin jQuery ;</p>
</li>
<li>
<p>permettre d’afficher les numéros de rangées/colonnes ;</p>
</li>
<li>
<p>permettre la personnalisation des pièces, des couleurs ;</p>
</li>
<li>
<p>avoir un <em>vrai viewer</em> <a href="http://fr.wikipedia.org/wiki/Portable_Game_Notation">PGN</a> en HTML5/javascript</p>
</li>
<li>
<p><strong>ajouter des tests unitaires !</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le site du projet : <a href="http://jschessboard.com" class="bare">http://jschessboard.com</a></p>
</div>
<div class="paragraph">
<p>Pour voir la bibliothèque en action, il y quelques démos sur le site du projet <a href="http://jschessboard.com/svn/trunk/examples/operagame.html">ici</a>, <a href="http://jschessboard.com/svn/trunk/examples/checkmate.html">là</a> ou encore <a href="http://jschessboard.com/svn/trunk/examples/fen.html">là</a>.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/06/09/js-Chessboard-02-est-disponible.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/06/09/js-Chessboard-02-est-disponible.html</guid><category><![CDATA[javascript]]></category><category><![CDATA[ html5]]></category><category><![CDATA[ chess]]></category><category><![CDATA[ jsChessboard]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 09 Jun 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vérifier le JIRA avant de faire la release]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quand je coiffe ma casquette de <em>release manager</em> je dois m’assurer que le logiciel que je prépare à affubler d’un joli numéro de version est prêt. Le code n’est pas tout ; il existe une multitude de petits détails à vérifier pour satisfaire les critères de qualité demandés : les tests (unitaires, d’intégration) passent ils ? Le <em>coding style</em> a-t-il été bien respecté ? Les dépendences sont-elles à jour ? Je me suis donc fait une <em>release checklist</em> qui détaille point par point toutes ces tâches.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_automatisez">Automatisez !</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En bon informaticien pragmatique je connais le bug de l’interface chaise-clavier : tout ce qui est fait à la main est une intarissable source de problèmes et il m’arrive parfois de faire une bêtise, ce qui a le don de me mettre de fort mauvaise humeur.</p>
</div>
<div class="paragraph">
<p>Comme je suis -=fainéant=- consciencieux, je cherche donc à automatiser le maximum de tâches. Dans ma checklist se trouve le point suivant : s’assurer que tous les tickets dans le JIRA sont fermés. Mon objectif : annuler le lancement de la release quand cette condition n’est pas remplie.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jira_par_rpc">JIRA par RPC</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans une premier temps il faut accéder à JIRA pour récupérer la liste des issues qui nous intéressent. Pour cela JIRA met à disposition deux interfaces RPC : XML-RPC et SOAP. On utilisera SOAP, non pas par plaisir car je trouve XML-RPC beaucoup plus simple, mais parce que l’API disponible par XML-RPC est moins riche et surtout ne fournit pas la méthode dont on a besoin.</p>
</div>
<div class="paragraph">
<p>Le descripteur WSDL est normalement servit par JIRA. En supposant que JIRA est installé à l’URL <code><a href="http://jira.chelonix.com/" class="bare">http://jira.chelonix.com/</a></code> alors le WSDL peut être téléchargé à l’URL suivante :</p>
</div>
<div class="paragraph">
<p><code><a href="http://jira.chelonix.com/rpc/soap/jirasoapservice-v2?wsdl" class="bare">http://jira.chelonix.com/rpc/soap/jirasoapservice-v2?wsdl</a></code></p>
</div>
<div class="paragraph">
<p>Pour utiliser l’API SOAP de JIRA il va falloir enrichir son pom.xml de quelques dépendances à la bibliothèque <a href="http://ws.apache.org/axis/">Axis</a> de la fondation Apache.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">    &lt;!-- Axis dependencies --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-jaxrpc&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-saaj&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-wsdl4j&lt;/artifactId&gt;
      &lt;version&gt;1.5.1&lt;/version&gt;
    &lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Toujours dans le <code>pom.xml</code> on ajoute un appel au plugin axistools-maven-plugin. Lors de la phase <em>generate-sources</em>, le fichier WSDL va être utilisé pour auto-générer les classes du client SOAP.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;axistools-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.3&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;axis&lt;/groupId&gt;
            &lt;artifactId&gt;axis&lt;/artifactId&gt;
            &lt;version&gt;1.3&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;configuration&gt;
          &lt;wsdlFiles&gt;
            &lt;wsdlFile&gt;jirasoapservice-v2.wsdl&lt;/wsdlFile&gt;
          &lt;/wsdlFiles&gt;
          &lt;packageSpace&gt;com.atlassian.jira.rpc.soap.client&lt;/packageSpace&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;wsdl2java-generation&lt;/id&gt;
            &lt;phase&gt;generate-sources&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;wsdl2java&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le plugin s’attend à trouver le WSDL dans le répertoire <code>${basedir}/src/main/wsdl</code>. Pensez à l’y mettre ou à modifier la propriété <code>sourceDirectory</code> dans la configuration du plugin.
Une fois que le projet a été configuré, il ne reste plus qu’à coder :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">package com.chelonix.jira.rpc.soap.client;

import com.atlassian.jira.rpc.exception.RemoteException;
import com.atlassian.jira.rpc.soap.client.JiraSoapService;
import com.atlassian.jira.rpc.soap.client.JiraSoapServiceService;
import com.atlassian.jira.rpc.soap.client.JiraSoapServiceServiceLocator;
import com.atlassian.jira.rpc.soap.client.RemoteIssue;
import java.net.URL;

/**
 * A JIRA SOAP client checking for opened issues for a project/version couple.
 */
public class IssueChecker
{
    private static final String URL = "http://jira.chelonix.com/rpc/soap/jirasoapservice-v2";

    public static void main(String[] args)
    {
        try {
            IssueCherker checker = new IssueChecker();
            RemoteIssue[] issues = checker.check(args[0], args[1]);
            for (RemoteIssue issue: issues) {
                System.out.printf("Opened issue: %s", issue.getKey());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JiraSoapService jiraSoapService;

    public IssueChecker() throws Exception
    {
        JiraSoapServiceService jiraSoapServiceLocator =
            new JiraSoapServiceServiceLocator();
        jiraSoapService = jiraSoapServiceLocator.getJirasoapserviceV2(new URL(URL));
    }

    public RemoteIssue[] check(String projectKey, String version) throws RemoteException
        String token = jiraSoapService.login("login", "password");
        String query = MessageFormat.format(
            "project=''{0}'' AND FixVersion=''{1}'' AND status!=''Closed''",
            project, version);
        return jiraSoapService.getIssuesFromJqlSearch(token, query, 100);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pour plus de détails, la documentation des services RPC de JIRA est là : <code><a href="http://confluence.atlassian.com/display/JIRA/JIRA+RPC+Services" class="bare">http://confluence.atlassian.com/display/JIRA/JIRA+RPC+Services</a></code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cr_er_des_r_gles">Créer des règles…</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maintenant qu’on peut savoir s’il reste des issues ouvertes pour un projet/version donné, il faut faire en sorte que l’appel <code>mvn release:prepare</code> échoue quand c’est le cas. Pour cela on va utiliser le plugin <a href="http://maven.apache.org/plugins/maven-enforcer-plugin/)">maven-enforcer-plugin</a>. Ce plugin permet de subordonner la compilation à la vérification d’un certain nombre de contraintes telles que la version de maven, la version du JDK, la présence de certains fichiers, etc.</p>
</div>
<div class="paragraph">
<p>Le plugin permet également d’ajouter ses propres règles. On peut donc en créer une se basant sur la classe <code>IssueChecker</code>.</p>
</div>
<div class="paragraph">
<p>D’abord on ajoute quelques dépendances au pom.xml :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">  &lt;dependencies&gt;
    &lt;!-- Enforcer dependencies --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven.enforcer&lt;/groupId&gt;
      &lt;artifactId&gt;enforcer-api&lt;/artifactId&gt;
      &lt;version&gt;${api.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-project&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-core&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-plugin-api&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.plexus&lt;/groupId&gt;
      &lt;artifactId&gt;plexus-container-default&lt;/artifactId&gt;
      &lt;version&gt;1.0-alpha-9&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Puis il faut écrire une implémentation de l’interface <a href="http://maven.apache.org/enforcer/enforcer-api/apidocs/index.html">EnforcerRule</a> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">package com.chelonix.maven.enforcer.rule;

import java.text.MessageFormat;
import com.atlassian.jira.rpc.exception.RemoteException;
import com.atlassian.jira.rpc.soap.client.RemoteIssue;
import org.apache.maven.enforcer.rule.api.EnforcerRule;
import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;

/**
 * Implementation of the EnforcerRule verifying whether there is any remaining unclosed issues.
 */
public class JiraOpenIssuesRule implements EnforcerRule
{
    private boolean shouldIfail = false;

    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException
    {
        try {
            MavenProject project = (MavenProject)helper.evaluate("${project}");
            String version = project.getVersion();
            String projectKey = (String)helper.evaluate("${jira.project.key}");
            IssueChecker checker = new IssueChecker();
            RemoteIssue[] issues = checker.check(projectKey, version);
            shouldIfail = issues.length &gt; 0;
        } catch (ExpressionEvaluationException e) {
            throw new EnforcerRuleException("Unable to lookup an expression " +
                e.getMessage(), e);
        } catch (RemoteException re) {
            throw new EnforcerRuleException("SOAP Remote exception " +
                re.getMessage(), re);
        }
        if (this.shouldIfail) {
            throw new EnforcerRuleException("Remaining unclosed issues");
        }
    }

    public boolean isCacheable()
    {
        return false;
    }

    public boolean isResultValid(EnforcerRule er)
    {
        return false;
    }

    public String getCacheId()
    {
        return "";
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pensez à ajouter une propriété <code>jira.project.key</code> indiquant la clé du projet JIRA dans le <code>pom.xml</code> du projet dont on fait la release.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__et_les_faire_appliquer">… Et les faire appliquer</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Finalement il n’y a plus qu’à appeler le plugin Enforcer lors de la release. Dans le <code>pom.xml</code> du projet à releaser on va ajouter le code suivant :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;build&gt;
    &lt;plugins&gt;
    ...
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.0&lt;/version&gt;
          &lt;configuration&gt;
            &lt;preparationGoals&gt;clean verify enforcer:enforce&lt;/preparationGoals&gt;
            &lt;arguments&gt;-Prelease&lt;/arguments&gt;
            &lt;goals&gt;deploy&lt;/goals&gt;
            &lt;autoVersionSubmodules&gt;true&lt;/autoVersionSubmodules&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
    ...
    &lt;plugins&gt;
&lt;build&gt;

&lt;profile&gt;
  &lt;id&gt;releaseVerify&lt;/id&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;com.chelonix.maven.enforcer&lt;/groupId&gt;
            &lt;artifactId&gt;jira-rules&lt;/artifactId&gt;
            &lt;version&gt;${jirarules.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;configuration&gt;
          &lt;rules&gt;
            &lt;myCustomRule implementation="com.chelonix.maven.enforcer.rule.JiraOpenIssuesRule"&gt;
              &lt;shouldIfail&gt;false&lt;/shouldIfail&gt;
            &lt;/myCustomRule&gt;
          &lt;/rules&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/profile&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quelques remarques : j’ai créé un profil <code>releaseVerify</code> afin de définir des règles utilisées uniquement lors de la release. Ensuite j’ai ajouté l’appel <code>enforcer:enforce</code> au paramètre de configuration <code>preparationGoals. Ce paramètre permet de définir une liste de <em>goals</em> à exécuter lors de `release:prepare</code>. Par défaut ce sont les goals <code>clean verify</code> qui sont exécutés. Enfin j’ai ajouté le paramètre arguments avec la valeur <code>-PreleaseVerify</code> pour forcer l’usage du profil.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Désormais toute tentative de release avec des tickets encore ouverts dans le JIRA va échouer. Cela ne me dispense pas de faire la vérification mais me prémunit contre un éventuel oubli. Toutefois le code est encore loin d’être parfait (par exemple il y a un risque de NullPointerException quand <code>jira.project.key</code> n’est pas défini).</p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/31/Verifier-le-JIRA-avant-de-faire-la-release.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/31/Verifier-le-JIRA-avant-de-faire-la-release.html</guid><category><![CDATA[jira]]></category><category><![CDATA[ maven]]></category><category><![CDATA[ maven-enforcer-plugin]]></category><category><![CDATA[ maven-release-plugin]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 31 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Crible d’Ératosthène en Scala]]></title><description><![CDATA[<div class="paragraph">
<p>Le <a href="https://fr.wikipedia.org/wiki/Crible_d%27%C3%89ratosth%C3%A8ne">crible d’Ératosthène</a> est un grand classique des langages fonctionnels :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def primes (end: Int): Seq[Int] = {
  def sieve (list: Seq[Int]): Seq[Int] = {
    list match {
      case Nil =&gt; List()
      case x :: xs =&gt; List(x) ++ sieve(xs.filter(_ % x != 0))
    }
  }
  sieve(List.range(2, end))
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Faisons un test :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">scala&gt; primes(100)
res0: Seq[Int] = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)</code></pre>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/20/Crible-d-Eratosthene-en-Scala.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/20/Crible-d-Eratosthene-en-Scala.html</guid><category><![CDATA[scala]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Thu, 20 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Android 2.1 passe en tête]]></title><description><![CDATA[<div class="paragraph">
<p>Google vient de <a href="http://developer.android.com/resources/dashboard/platform-versions.html">mettre à jour</a> ses données concernant la répartition des différentes versions d’android :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/android_fragmentation-20100519.png" alt="Répartition des version Android" width="370">
</div>
</div>
<div class="paragraph">
<p>Ces chiffres ont été collectés à partir des statistiques de connexion à l’Android Market. Voilà ce que cela donne :</p>
</div>
<table class="tableblock frame-topbot grid-all spread">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Android Platform</th>
<th class="tableblock halign-left valign-top">Percent of Devices</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.1%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.5</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">34.1%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.6</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">28.0%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.2%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.0.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.4%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">37.2%</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>C’est en comparant avec les même données du mois dernier que cela devient intéressant : Android 2.1 passe de 27,3% à 37,2% de part de marché, soit une augmentation de presque 10 points. À l’opposé, les versions 1.5 et 1.6 perdent respectivement 3,8 points et 3,6 points. Cela veut surtout dire que la version 2.1 est désormais la version majoritairement déployée sur l’ensemble des terminaux Android.</p>
</div>
<div class="paragraph">
<p>En supposant que ces chiffres soit représentatifs du parc (<a href="http://www.sosandroid.fr/andropress/2010/05/18/android-eclair-2-1-devient-la-principale-version-deployee-3821/">et SOS Android a fait quelques comparaisons et semble le croire</a>), on assiste, lentement mais sûrement, à une concentration des versions diffusées. Les améliorations entre 1.x et les 2.x ayant réellement amélioré la qualité de l’OS, cette concentration est plutôt une bonne nouvelle.</p>
</div>
<div class="paragraph">
<p>À moins que la version 2.2, alias <em>Froyo</em>, ne vienne changer la donne.</p>
</div>
<div class="paragraph">
<p><strong>Update</strong> Après plusieurs mois de rumeurs HTC vient de publier la première mise à jour officielle du Hero (Uniquement chez Sprint pour le moment).</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/19/Android-21-passe-en-tete.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/19/Android-21-passe-en-tete.html</guid><category><![CDATA[android]]></category><category><![CDATA[ google]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 19 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quicksort en Scala]]></title><description><![CDATA[<div class="paragraph">
<p>Retour aux racines du génie logiciel : le tri. Tout développeur doit savoir écrire un tri en moins de 5 minutes.</p>
</div>
<div class="paragraph">
<p>Comment faire un quicksort en Scala ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort (list : Seq[Int]) : Seq[Int] = {
  list match {
    case Nil =&gt; list
    case x :: xs =&gt; sort(xs.filter(_ &lt; x)) ++ List(x) ++ sort(xs.filter(_ &gt;= x))
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ça marche pour les int. Mais si je veux trier des float, des String, des Scoubidou ? Il faudrait généraliser la fonction. Pour cela il existe le trait `Ordered qui permet de définir une relation d’ordre total sur les éléments.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A &lt;% Ordered[A]] (list:Seq[A]): Seq[A] = {
  list match {
    case Nil =&gt; list
    case x :: xs =&gt; sort(xs.filter(_ &lt; x)) ++ List(x) ++ sort(xs.filter(_ &gt;= x))
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>L’expression `[A &lt;% Ordered[A]] est une <em>view bound</em>. Cela permet de définir une fonction polymorphique mais aussi fournit la conversion implicite du type A en Ordered[A]. En fait cette définition :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A &lt;% Ordered[A]] (list:Seq[A]): Seq[A] = { /* ... */ }</code></pre>
</div>
</div>
<div class="paragraph">
<p>est équivalente à :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A] (list:Seq[A])(implicit conv: A =&gt; Ordered[A]): Seq[A] = { /* ... */ }</code></pre>
</div>
</div>
<div class="paragraph">
<p>Avantage : l’objet <code>scala.Predef</code> qui est tourjours chargé par Scala possède déjà plusieurs fonctions implicites de converstion par exemple <code>Int</code> vers <code>Ordered[Int]</code>.</p>
</div>
<div class="paragraph">
<p>Et si maintenant nous compararions nos scoubidous ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">case class Scoubidou(name: String)
val samy = Scoubidou("Samy")
val daphne = Scoubidou("Daphne")
sort(List(samy, daphne))

&gt; error: no implicit argument matching parameter type (Scoubidou) =&gt; Ordered[Scoubidou] was found.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et oui, sort attend un <code>Ordered</code>. Bien sûr nous pourrions nous arranger pour que Scoubidou étende le trait Ordered mais parfois ce n’est simplement pas possible, par exemple parce que le type est fournit par une bibliothèque sur laquelle on n’a pas la main. Mais il est possible de définir une fonction implicite de conversion qui trie les Scoubidou selon l’ordre lexicographique (en clair on va déléguer l’appel à compare au champ name).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">implicit def scoubidou2ordered (x: Scoubidou): Ordered[Scoubidou] = {
  new Ordered[Scoubidou] {
    def compare(that: Scoubidou): Int = {
      x.name.compare(that.name)
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>et maintenant on peut trier la liste :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">sort(List(samy, daphne))

&gt; Seq[Scoubidou] = List(Scoubidou(Daphne), Scoubidou(Samy))</code></pre>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/17/Quicksort-en-Scala.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/17/Quicksort-en-Scala.html</guid><category><![CDATA[scala]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 17 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Le zoo est ouvert]]></title><description><![CDATA[<div class="paragraph">
<p>Le combat fut rude, les erreurs absconses, n’étant pas grand amateur de PHP, mais finalement ce blog est installé. S’il reste encore pas mal de chose à terminer, l’essentiel fonctionne. Reste à avoir des choses à raconter et du temps pour le faire.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/16/Le-zoo-est-ouvert.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/16/Le-zoo-est-ouvert.html</guid><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 16 May 2010 00:00:00 GMT</pubDate></item></channel></rss>