<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Coding Stories]]></title><description><![CDATA[Singe savant en ingénierie logicielle]]></description><link>https://jcsirot.github.io/hubpress.io</link><image><url>images/cover/cover.jpg</url><title>Coding Stories</title><link>https://jcsirot.github.io/hubpress.io</link></image><generator>RSS for Node</generator><lastBuildDate>Tue, 19 Jul 2016 11:05:31 GMT</lastBuildDate><atom:link href="https://jcsirot.github.io/hubpress.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Continuous Delivery with Jenkins workflow and Docker]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Recently Cloudbees releases the <a href="https://wiki.jenkins-ci.org/display/JENKINS/CloudBees+Docker+Workflow+Plugin">CloudBees Docker Workflow Plugin</a> to make the integration of Docker with Jenkins workflows as easy as possible. Now, deploying a continuous delivery pipeline is (almost) straightforward. Here is a simple but comprehensive example.</p>
</div>
<div class="paragraph">
<p><em>Disclaimer</em>: I&#8217;m using a maven project for this example because maven is a tool I&#8217;m comfortable with. This post could be adapted to python, rails or whatever-you-want project with minor efforts.</p>
</div>
<div class="paragraph">
<p>First of all, we need to install the required plugins in Jenkins:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Workflow: Aggregator</p>
</li>
<li>
<p>CloudBees Docker Workflow</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>This sample workflow is simple and composed of 4 steps:</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Build and unit tests</p>
</li>
<li>
<p>Build Docker image</p>
</li>
<li>
<p>Acceptance Tests</p>
</li>
<li>
<p>Push Docker image</p>
</li>
</ol>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_and_unit_tests">Build and unit tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In a new Workflow job enter this script:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* Configure the JDK to use. 'JDK8' is the symbolic name under which the JDK
     * is defined in the global Jenkins configuration. */
    env.JAVA_HOME="${tool 'JDK8'}"

    stage 'Build'
    /* Clone the project from github */
    git url: 'https://github.com/jcsirot/atmosphere-calculator.git', branch: '0.1.0'
    /* Select the maven configuration. 'M3' is the symbolic name used the
     * global Jenkins configuration. */
    def mvnHome = tool "M3"
    /* Run maven: build and run the unit tests  */
    sh "${mvnHome}/bin/mvn clean package"
    /* This is the syntax for using a generic step. Here the test results are archived. */
    step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>This short script runs maven to build the jars and to execute the unit tests. Now we are ready to build the Docker image.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_build_docker_image">Build Docker image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The CloudBees Docker Workflow Plugin provides a global variable <code>docker</code> which offers access to the common Docker functions in workflow scripts. For a comprehensive description of the plugin and the available commands, look at the <a href="http://documentation.cloudbees.com/docs/cje-user-guide/docker-workflow.html">plugin guide</a>.</p>
</div>
<div class="paragraph">
<p>To build the image we call <code>build</code> on the <code>docker</code> variable. Two parameters are passed: the image name (with the Docker notation <code>[registry/]image[:tag]</code>) and the directory where is located the <code>Dockerfile</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Build Docker image'
    def image = docker.build('jcsirot/atmo-calc:snapshot', '.')
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The call returns a handle on the built image so we can work with it.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_acceptance_tests">Acceptance Tests</h2>
<div class="sectionbody">
<div class="paragraph">
<p>In order to execute the acceptance tests we wants to run a container from our newly built image. The <code>withRun</code> method can be invoked on the image handle. It is possible to pass the <code>docker run</code> parameters like port mapping or volumes configuration.</p>
</div>
<div class="paragraph">
<p><code>withRun</code> also takes a code block. The container is started at the begining of the block, then the code in the block is executed and the container is stopped at the end of the block. Note that the block is executed on the Jenkins node, <em>not inside the container</em>. Use the <code>inside</code> method on the image handle to execute code inside the container.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Acceptance Tests'
    image.withRun('-p 8181:8181') {c -&gt;
        sh "${mvnHome}/bin/mvn verify"
    }
    /* Archive acceptance tests results */
    step([$class: 'JUnitResultArchiver', testResults: '**/target/failsafe-reports/TEST-*.xml'])
}</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_push_docker_image">Push Docker image</h2>
<div class="sectionbody">
<div class="paragraph">
<p>The last step consists in pushing the image to a Docker registry. It can be done with the method <code>push</code>.</p>
</div>
<div class="paragraph">
<p>In order to configure the registry credentials, go the Jenkins Manager Credentials page. Add a new username/password entry and enter your registry login and password. Click on <em>Advanced</em> to show the ID field and enter a unique identifier.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/jenkins-docker-credentials-20150823.png" alt="Docker Hub Credentials">
</div>
</div>
<div class="paragraph">
<p>The <code>withRegistry</code> method is also used to pass the registry URL and credentials ID configure above.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-groovy" data-lang="groovy">node {
    /* ... */
    stage 'Push image'
    docker.withRegistry("https://registry.hub.docker.com", "docker-registry") {
        image.push()
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>The image is pushed and, unless you pushed it to a custom registry, should be available on the <a href="https://hub.docker.com/">Docker hub</a>.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_what_s_next">What&#8217;s next?</h2>
<div class="sectionbody">
<div class="paragraph">
<p>This example is simple and far from being perfect. Feel free to share suggestions or questions in the comments.</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The project I used for this sample: <a href="https://github.com/jcsirot/atmosphere-calculator">https://github.com/jcsirot/atmosphere-calculator</a></p>
</li>
<li>
<p>The workflow script: <a href="https://gist.github.com/jcsirot/4de001d280998f27aa82">https://gist.github.com/jcsirot/4de001d280998f27aa82</a></p>
</li>
</ul>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2015/08/23/Continuous-Delivery-with-Jenkins-workflow-and-Docker.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2015/08/23/Continuous-Delivery-with-Jenkins-workflow-and-Docker.html</guid><category><![CDATA[Continuous Delivery]]></category><category><![CDATA[ Jenkins]]></category><category><![CDATA[ Jenkins workflow]]></category><category><![CDATA[ maven]]></category><category><![CDATA[ Docker]]></category><category><![CDATA[ devops]]></category><category><![CDATA[ test]]></category><category><![CDATA[ en]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 23 Aug 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[SSL et les banques]]></title><description><![CDATA[<div class="paragraph">
<p>Il y a quelques jours l&#8217;expert en sécurité Troy Hunt <a href="http://www.troyhunt.com/2015/05/do-you-really-want-bank-grade-security.html">publiait sur son blog</a> un état des lieux de l&#8217;utilisation de SSL par les banques australiennes.</p>
</div>
<div class="paragraph">
<p>Et qu&#8217;en est-il des banques françaises ? En utilisant le service <a href="https://www.ssllabs.com/">SSL Labs</a> de Qualys, voici les résultats obtenus.</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.0909%;">
<col style="width: 9.091%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top"></th>
<th class="tableblock halign-left valign-top">Note</th>
<th class="tableblock halign-left valign-top">SSL v3</th>
<th class="tableblock halign-left valign-top">Certificats SHA-1</th>
<th class="tableblock halign-left valign-top">TLS 1.2</th>
<th class="tableblock halign-left valign-top">RC4</th>
<th class="tableblock halign-left valign-top">Perfect Forward Secrecy</th>
<th class="tableblock halign-left valign-top">Vulnérabilité POODLE</th>
<th class="tableblock halign-left valign-top">Vulnérabilité Heartbleed</th>
<th class="tableblock halign-left valign-top">Certificat EV</th>
<th class="tableblock halign-left valign-top">Certificate Transparency</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.ibps.rivesparis.banquepopulaire.fr&amp;hideResults=on">www.ibps.rivesparis.banquepopulaire.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><strong>A</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=secure.ingdirect.fr&amp;hideResults=on">secure.ingdirect.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><strong>A-</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=boursorama.com&amp;s=83.231.216.140&amp;hideResults=on">www.boursorama.com</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: lightgreen;"><p class="tableblock"><strong>A-</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong> *</p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.axa.fr&amp;s=174.35.7.31&amp;hideResults=on">www.axa.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong> **</p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.hellobank.fr&amp;hideResults=on">www.hellobank.com</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.ca-paris.fr&amp;hideResults=on">www.ca-paris.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong> **</p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.cic.fr&amp;s=145.226.109.155&amp;hideResults=on">www.cic.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.secure.bnpparibas.net&amp;s=159.50.16.33&amp;hideResults=on">www.secure.bnpparibas.net</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.caisse-epargne.fr&amp;s=91.135.188.224&amp;hideResults=on">www.caisse-epargne.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.monabanq.com&amp;s=145.226.99.116&amp;hideResults=on">www.monabanq.com</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.macif.fr&amp;hideResults=on">www.macif.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.hsbc.fr&amp;s=91.214.6.232">www.hsbc.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong> **</p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=particuliers.secure.lcl.fr&amp;hideResults=on">particuliers.secure.lcl.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=creditmutuel.fr&amp;s=145.226.45.139&amp;hideResults=on">www.creditmutuel.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: orange;"><p class="tableblock"><strong>B</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.fortuneo.fr&amp;s=194.51.217.72&amp;hideResults=on">www.fortuneo.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><strong>C</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong> **</p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.societegenerale.fr&amp;hideResults=on">www.societegenerale.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><strong>C</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.allianzbanque.fr&amp;hideResults=on">www.allianzbanque.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><strong>C</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.credit-du-nord.fr&amp;hideResults=on">www.credit-du-nord.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: yellow;"><p class="tableblock"><strong>C</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=espaceclient.groupama.fr&amp;hideResults=on">espaceclient.groupama.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>F</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><a href="https://www.ssllabs.com/ssltest/analyze.html?d=www.labanquepostale.fr&amp;hideResults=on">www.labanquepostale.fr</a></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>F</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: red;"><p class="tableblock"><strong>FAIL</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: green;"><p class="tableblock"><strong>PASS</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>YES</strong></p></td>
<td class="tableblock halign-left valign-top" style="background-color: gray;"><p class="tableblock"><strong>NO</strong></p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p><span class="small">* un certificat intermédiaire utilise SHA-1</span>
<span class="small">** Le certificat de l’autorité racine utilise SHA-1</span></p>
</div>
<div class="paragraph">
<p>Quelques remarques complémentaires :</p>
</div>
<div class="paragraph">
<p>D&#8217;abord, en faisant ce test, j&#8217;ai été surpris de découvrir que nombreuses banques ne servaient pas leur page d&#8217;accueil directement en HTTPS.</p>
</div>
<div class="paragraph">
<p>Ensuite bravo aux équipes IT de la Banque populaire, de ING Direct et de Boursorama pour leur note A.</p>
</div>
<div class="paragraph">
<p>Enfin, concernant les notes C et F, elles sont principalement dues à des serveurs vulnérables à l&#8217;attaque <a href="https://fr.wikipedia.org/wiki/POODLE">POODLE</a> (sauf Groupama, vulnérable à <a href="https://community.qualys.com/blogs/securitylabs/2009/11/05/ssl-and-tls-authentication-gap-vulnerability-discovered?_ga=1.245541639.2029124093.1429356581">une attaque sur la renégociation TLS</a>). Il n&#8217;y a sans doute pas de vrai risque d&#8217;attaque car les banques disposent d&#8217;autres mécanismes de protection. Toutefois cela ne donne pas une bonne image et n&#8217;incite pas à la confiance&#8201;&#8212;&#8201;et moi-même étant client de la Banque Postale, je m&#8217;interroge.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2015/05/09/SSL-et-les-banques.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2015/05/09/SSL-et-les-banques.html</guid><category><![CDATA[SSL]]></category><category><![CDATA[ TLS]]></category><category><![CDATA[ security]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 09 May 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[The Secret of Monkey Island dans le navigateur]]></title><description><![CDATA[<div class="paragraph">
<p>Il y a environ un an, pour apprendre <a href="http://www.dartlang.org/">Dart</a>, je me suis lancé dans un projet un peu fou : réécrire un moteur <a href="http://en.wikipedia.org/wiki/SCUMM">SCUM</a> en Dart en portant le code source du projet open-source <a href="https://github.com/scummvm/scummvm">ScummVM</a>. L&#8217;objectif est de pouvoir jouer à Monkey Island (version française CD, SCUMM version 5) directement dans le navigateur.</p>
</div>
<div class="paragraph">
<p>J&#8217;ai fait une longue pause en attendant que le langage se stabilise et j&#8217;ai repris le code récemment. Voilà une courte vidéo (désolé pour la faible qualité, c&#8217;est mon premier post sur youtube) qui montre ce qui fonctionne pour le moment (pour faire court, le générique du jeu).</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="360" src="https://www.youtube.com/embed/UkZ6v8LHbaU?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>Sur la vidéo on voit qu&#8217;il reste quelques problèmes :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>un problème de palette de couleur pour les crédits : ils sont écrits en bleu, ils devraient être magenta ;</p>
</li>
<li>
<p>c&#8217;est lent. À mon avis, ce problème est lié à Dartium ou au debugger du Dart Editor. Après compilation avec dart2js ça semble beaucoup plus rapide mais le Javascript produit contient des erreurs.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le code n&#8217;est pas encore publié mais sera rapidement <a href="https://github.com/jcsirot/SCUMM-Dart">disponible sur GitHub</a> où pour le moment est hébergé l&#8217;ancienne version.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2013/03/19/The-Secret-of-Monkey-Island-dans-le-navigateur.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2013/03/19/The-Secret-of-Monkey-Island-dans-le-navigateur.html</guid><category><![CDATA[dart]]></category><category><![CDATA[ dartlang]]></category><category><![CDATA[ SCUMM]]></category><category><![CDATA[ ScummVM]]></category><category><![CDATA[ SCUMMDart]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Tue, 19 Mar 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Code Story 2013 : la phase de sélection]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quand j&#8217;ai lu début janvier l&#8217;annonce du lancement de la saison 2013 de Code Story j&#8217;ai trouvé le principe de sélection amusant. Cette année, c&#8217;est décidé je participe à Code Story. Code Story 2013 me voilà&#8230;&#8203;</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_choix_des_technologies">Choix des technologies</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cette année la sélection consistait à mettre en place un serveur web répondant aux questions du bot de Code Story. Quand la réponse envoyée est fausse, le bot continue à poser la question régulièrement jusqu'à obtenir une réponse correcte. De temps un temps un petit reboot du bot lui fait poser une nouvelle fois toutes les questions depuis le début. Gare alors aux régressions&#8230;&#8203;</p>
</div>
<div class="paragraph">
<p>Pour le choix du langage, après avoir hésité à choisir un langage "alternatif" (Dart ? Ceylon ?), j&#8217;ai préféré partir sur une valeur sûre et maitrisée : Java.</p>
</div>
<div class="paragraph">
<p>Côté serveur web, il y a pléthore de choix : du <a href="https://github.com/jnizet/CodeStory2013">serveur HTTP réécrit from scratch</a> à partir de <code>java.net.ServerSocket</code> au full-fledge framework comme Play 2 en passant par Jetty et Tomcat. J&#8217;ai choisi la voie moyenne en utilisant le <a href="http://docs.oracle.com/javase/6/docs/jre/api/net/httpserver/spec/index.html?com/sun/net/httpserver/package-summary.html">serveur HTTP livré avec le JRE</a> depuis Java 6.</p>
</div>
<div class="paragraph">
<p>Restait l&#8217;hébergement du serveur. Pour ma première incursion dans le Cloud je me suis souvenu de la présentation <a href="http://blog-rd.ideotechnologies.com/?p=2943">Du legacy au cloud</a> donnée par David Gageot lors du dernier JUG Summer Camp. Il utilisait <a href="http://www.heroku.com/">Heroku</a> pour déployer son application car il est possible de lancer n&#8217;importe quel programme Java disposant d&#8217;un simple <code>main</code>. Le port du serveur est simplment fourni dans une variable d&#8217;environnement. La création d&#8217;une application dans Heroku se fait en moins de 5 minutes et un "git push master heroku" suffit pour recompiler et redéployer automatiquement l&#8217;application. Cerise sur la gâteau, il existe des dizaines de modules complémentaires pour le stockage des données, le logging, etc qu&#8217;il est possible d&#8217;ajouter à son application d&#8217;un simple click.</p>
</div>
</div>
</div>
<h1 id="_premi_res_questions" class="sect0">Premières questions</h1>
<div class="paragraph">
<p>Les premières questions sont simples "Quelle est ton adresse email", "Es tu content de participer à Code Story(OUI/NON)"&#8230;&#8203; Elles permettent au bot Code Story de vérifier que le serveur est bien présent et lit et répond correctement aux requêtes.</p>
</div>
<div class="paragraph">
<p>Les choses sérieuses commence avec l&#8217;arrivée d&#8217;une requête <code>POST</code> contenant l'énonce du premier exercice. J&#8217;interface alors le serveur avec Amazon S3 (merci à Amazon pour sa <a href="http://aws.amazon.com/fr/sdkforjava/">bibliothèque d&#8217;intégration</a>) pour stocker le contenu des requêtes POST qui arrivent, histoire de ne pas perdre l'énoncé.</p>
</div>
<h1 id="_l_choppe_de_monade_sur_scalaskel" class="sect0">L'échoppe de monade sur Scalaskel</h1>
<div class="paragraph">
<p>Le premier énoncé s&#8217;appelle <em><a href="http://code-story.net/2013/01/22/scalaskel.html">L'échoppe de monade sur Scalaskel</a></em>. C&#8217;est un problème de rendu de monnaie : dénombrer toutes les façons possibles de partager une somme <code>S</code> avec des pièces de valeur <code>P1</code>, <code>P2</code>, <code>P3</code>, &#8230;&#8203; <code>Pn</code>.</p>
</div>
<div class="paragraph">
<p>Je commence classiquement en TDD par écrire des tests pour les premières valeurs : 1, rouge-vert-refactoring, 2, rouge-vert-refactoring&#8230;&#8203; À partir de 8 les choses se compliquent un peu, il y a faut retourner deux solutions. Petit à petit je commence à voir l&#8217;algorithme se dessiner. Les nouveaux tests sont assez simples à trouver et les phases de refactoring ne posent pas non plus trop de problèmes.</p>
</div>
<div class="paragraph">
<p>Finalement j&#8217;arrive à un algorithme contenant deux récursion : une première sur la valeur des pièces (on réduit le nombre de pièces différentes à chaque itération) et une seconde sur la somme à partionner.</p>
</div>
<div class="paragraph">
<p>Je redéploie le serveur et je vois dans les logs les appels du bots pour les valeurs successives de 1 à 100 comme indiqué dans l'énoncé. Tous les tests passent. Joie :p</p>
</div>
<div class="paragraph">
<p>Mon code : <a href="https://gist.github.com/jcsirot/4677917" class="bare">https://gist.github.com/jcsirot/4677917</a></p>
</div>
<div class="sect1">
<h2 id="_la_calculatrice">La calculatrice</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pas d'énoncé pour l&#8217;exercice suivant, les questions se suffisent à elles-même. D&#8217;abord ce sont de simples expressions <code>1+1</code>, <code>2+2</code>, etc ; progressivement elles deviennent plus compliquées : <code>(1+2)/2</code>. Bref, il va falloir écrire un solveur d&#8217;expressions arithmétques.</p>
</div>
<div class="paragraph">
<p>Certains auront l&#8217;idée d'évaluer l&#8217;expression en emabarquant Groovy, une idée très maligne. Mais moi je suis ici en terrain connu. Ce problème, je le fais coder aux ingénieurs que je vois en entretien d&#8217;embauche alors je sais comment faire : <a href="http://en.wikipedia.org/wiki/Shunting-yard_algorithm">l&#8217;algorithme Shunting-yard</a> inventé par Dijkstra permet de transformer une expression en notation infixée en notation post-fixée (la notation polonaise inversée bien connu des possesseurs de HP48) ou en AST.</p>
</div>
<div class="paragraph">
<p>Pour aller plus vite, pas (trop) de TDD. J'écris une liste de tests puis je code l&#8217;algorithme d&#8217;une traite. Comme on ne cherche à supporter que les quatres opérations et les parenthèses l&#8217;implémenter est assez courte. L&#8217;algorithme fonctionne (presque&#8230;&#8203;) du premier coup.</p>
</div>
<div class="paragraph">
<p>De nouvelles questions arrivant du bot demandent de supporter les nombres négatifs. J&#8217;ajoute un lexer pour découper l&#8217;expression en tokens car un simple StringTokenizer ne suffit plus.</p>
</div>
<div class="paragraph">
<p>Finalement, sécurisé par l&#8217;ensemble des tests unitaires, je me lance dans un important refactoring pour utiliser un pattern visitor et rendre le code un peu plus objet, la contrepartie étant un nombre de classes plus important.</p>
</div>
<div class="paragraph">
<p>Mon code : <a href="https://gist.github.com/jcsirot/4990325" class="bare">https://gist.github.com/jcsirot/4990325</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_location_d_astronef_sur_jajascript">Location d’astronef sur Jajascript</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le troisième exercice est <em><a href="http://code-story.net/2013/02/02/jajascript.html">Location d’astronef sur Jajascript</a></em> et c&#8217;est sans doute celui qui m&#8217;a demandé le plus de travail.</p>
</div>
<div class="paragraph">
<p>Tout commençait bien car j&#8217;avais déjà vu ce kata au Paris Scala User Group. J&#8217;ai donc rapidement produit une première version fonctionnelle. L&#8217;algorithme consite à parcourir de façon récursive l&#8217;arbre de toutes les combinaisons de locations possibles (c&#8217;est à dire en ne prenant que des vols qui ne chevauchent pas) et à garder la plus rentable.</p>
</div>
<div class="paragraph">
<p>Assez rapidement je trouve une optimisation. L&#8217;algorithme passe en effet beaucoup de temps à recalculer le chemin optimal pour une liste commençant par un vol donné. On peut donc créer un cache qui associe un vol avec le chemin optimal à utiliser.</p>
</div>
<div class="paragraph">
<p>Le premier déploiement (en fait le second, car j&#8217;avais oublié de trier les vols la première fois) fonctionne et va jusqu'à 1500 vols. Sauf que ma JVM comment à se sentir un peu à l'étroit dans les 512Mo de RAM accordés par Heroku et le processus commence à swapper. Impossible de répondre dans les 30 secondes impartis. Je pense que j&#8217;aurais pu améliorer les strucutures de données pour prendre moins de RAM mais je choisis une autre option.</p>
</div>
<div class="paragraph">
<p>À la lecture des tweets qui s'échangeaient sur ce problème je décide de chercher un algorithme non récursif. Ça sera comme bien souvent en discutant du problème avec un collègue que je trouverai la solution. Le cache calculé dans l&#8217;agorithme récursif peut être généré de façon itérative en commançant par la fin de la liste et en remontant vers les premiers vols tout en utilisant les valeurs stockées dans le cache pour calculer à chaque fois le résultat optimal.</p>
</div>
<div class="paragraph">
<p>Désormais mon algorithme passe la barre des 50000 vols (3,7 Mo de JSON tout de même) mais peine à le faire sous la barre des 30 secondes. Ma dernière idée me viendra un matin sous la douche :-) L&#8217;algorithme passe beaucoup de temps, en construisant les valeurs du cache, à copier des listes de chaînes de caractères. C&#8217;est en remplaçant ces copies par une simple implémentation de liste chaînée que j&#8217;obtiendrai la plus impressionnante amélioration de performance : le traitement d&#8217;une liste de 50000 vols passant de 17s à 20ms (oui, presque 1000 fois plus rapide).</p>
</div>
<div class="paragraph">
<p>Mon code : <a href="https://gist.github.com/jcsirot/4990366" class="bare">https://gist.github.com/jcsirot/4990366</a></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Code Story, c&#8217;est fun. J&#8217;aurais certainement passé plus de temps que prévu mais toujours en y prennant beaucoup de plaisir. Et cela permet de jouer avec des petits problèmes d&#8217;algorithmiques qu&#8217;on ne voit pas forcément tous les jours. Finalement j&#8217;ai été sélectionné pour la phase finale qui aura lieu chez Google jeudi 21 février. Cela fera l&#8217;objet d&#8217;un second post.</p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2013/02/20/Code-Story-2013-la-phase-de-selection.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2013/02/20/Code-Story-2013-la-phase-de-selection.html</guid><category><![CDATA[code-story]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 20 Feb 2013 00:00:00 GMT</pubDate></item><item><title><![CDATA[Un mois avec IntelliJ - début de l'expérience]]></title><description><![CDATA[<div class="paragraph">
<p>Habituellement je suis utilisateur de <a href="http://netbeans.org/">NetBeans</a>. Quand je dis cela, mon propos est souvent accueillis avec un certaine incrédulité. C&#8217;est mon petit côté rebel. Et pourtant NetBeans est un excellent IDE qui s&#8217;intègre très bien avec les outils que j&#8217;utilise. En plus je commence à accumuler une certaine expérience dessus et les reproches que je pourrais lui faire sont mineurs. Cependant j&#8217;entends de plus en plus parler <a href="http://www.jetbrains.com/idea/">d&#8217;IntelliJ IDEA</a> qui est un peu aux IDE ce que le Macbook Pro est aux ordinateurs : une marque distintive parmi les über-geek. S&#8217;il est toujours présenté comme bien supérieur à <a href="http://www.eclipse.org/">Eclipse</a> qu&#8217;en est il vis à vis de NetBeans ?</p>
</div>
<div class="paragraph">
<p>Coup de chance, en l&#8217;honneur de la fin du monde (qui finalement n&#8217;est jamais que le début d&#8217;un autre), Jetbrains a réalisé un joli coup de pub en proposant une promotion sur la licence de son IDE star : 50€ au lieu des 189€ habituels. Comme beaucoup, si j&#8217;en juge par la difficulté à accéder au site pendant les premières heures, je me suis laissé tenté.</p>
</div>
<div class="paragraph">
<p>C&#8217;est l&#8217;occasion de tester la version <em>Ultimate</em> d&#8217;IntelliJ et de la comparer à mon IDE habituel dans l&#8217;utilisation de que j&#8217;en fais tous les jours : développement Java, projets maven, javascript et HTML, un peu de python&#8230;&#8203; L&#8217;expérience est simple, à partir d&#8217;aujourd&#8217;hui et pendant 30 jours je remplace NetBeans par IntelliJ. Qui sortira gagnant de ce duel ? Rendez-vous dans un mois&#8230;&#8203;</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/12/21/Un-mois-avec-IntelliJ-debut-de-lexperience.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/12/21/Un-mois-avec-IntelliJ-debut-de-lexperience.html</guid><category><![CDATA[NetBeans]]></category><category><![CDATA[ IntelliJ]]></category><category><![CDATA[ IDE]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Fri, 21 Dec 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Migration du blog vers Octopress/Github]]></title><description><![CDATA[<div class="paragraph">
<p>Voilà, succombant à l&#8217;effet de mode, j&#8217;ai moi aussi migré mon blog de Wordpress vers <a href="http://octopress.org/">Octopress</a>. Raz le bol de mon ancien hébergeur, des versions antédiluviennes de PHP, des mises à jour qui demandent un sacrifice rituel pour fonctionner et des tarifs exhorbitants. Désormais les pages sont statiques et c&#8217;est Github qui héberge.</p>
</div>
<div class="paragraph">
<p>Ce qui m&#8217;a plu dans Octopress c&#8217;est sa puissance associée à une grande simplicité. Les plugins fournis en standard couvrent déjà une grande palette des besoins, allant de la mise en forme des posts à l&#8217;intégration des média sociaux. Sans une grande connaissance de Ruby j&#8217;ai pu sans difficulté écire une micro extension permettant d&#8217;intégrer les présentations issues de Slideshare. J&#8217;ai également été très rapidement capable modifier le <em>template</em> de base afin d&#8217;ajouter le support du bouton <em>Share</em> de LinkedIn.</p>
</div>
<div class="paragraph">
<p>Le meilleur ce sont sûrement les quelques commandes bien pensées qui simplifient la vie du bloggueur : un coup de <code>rake new_post["…"]</code> et un nouveau template vierge est créé dans le répertoire contenant les posts. Je tape <code>rake generate</code> et le site est généré, <code>rake preview</code> le déploie sur un serveur web démarré pour l&#8217;occasion. Mais le plus fort est sans doute la commande <code>rake deploy</code> qui va magiquement générer puis publier le site sur github.</p>
</div>
<div class="paragraph">
<p>Après un weekend passé à migrer manuellement tous les posts (car aucun des outils de migration testés ne fonctionnait correctement), migrer les commentaires, migrer les quelques pages statiques, mettre à jour les DNS, <em>coding-stories.com</em> a fait peau neuve. En espérant surtout trouver un peu plus de temps pour écrire.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/09/30/Migration-du-blog-vers-Octopress-Github.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/09/30/Migration-du-blog-vers-Octopress-Github.html</guid><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 30 Sep 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Mocker un serveur de mail avec Dumbster et JUnit]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Récemment, en écrivant des tests d’intégration j’ai rencontré un cas d’utilisation qui arrive fréquemment : un utilisateur s’inscrit à un service Web, un courriel lui est envoyé, il contient une URL permettant de confirmer son inscription. La question est comment tester ça automatiquement, par exemple dans un test <a href="http://seleniumhq.org/">Selenium</a> ?</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_la_solution_technique">La solution technique</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Première idée : créer un compte mail dédié pour ce test qu’on va interroger avec une bibliothèque comme <a href="http://www.oracle.com/technetwork/java/javamail/index.html">javamail</a>. Cette solution présente toutefois quelques problèmes. D’abord il va falloir maintenir cette boîte mail dans le temps. Ensuite si le serveur SMTP ou le serveur POP/IMAP est indisponible le test va échouer. Et que va-t-il se passer si deux tests sont lancés en même temps ? Finalement une solution qui me semble bien fragile.</p>
</div>
<div class="paragraph">
<p>Seconde idée : <em>mocker</em> un serveur SMTP qu’on ne lance que le temps du test. Après quelques rapides recherches j’ai trouvé <a href="http://quintanasoft.com/dumbster/">Dumbster</a>, un serveur qui répond aux requêtes SMTP mais sans relayer les messages envoyés. Ceux-ci sont stockés et peuvent ensuite être examinés.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_int_gration_avec_junit">Intégration avec JUnit</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Pour intégrer Dumbster avec JUnit, j’ai écrit une <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TestRule.html"><code>TestRule</code></a>. Les TestRule de JUnit sont des classes qui permettent de modifier la façon dont une méthode de test (ou un ensemble de méthodes) va se comporter en exécutant du code avant ou après le test. C’est un moyen très pratique de factoriser des comportements qu’on est amené à utiliser souvent dans les tests : par exemple <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TemporaryFolder.html"><code>TemporaryFolder</code></a> permet de créer des répertoires et des fichiers temporaire et de les supprimer à la fin du test, <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/Timeout.html"><code>Timeout</code></a> s’assure que les tests ne dépasseront une durée maximale donnée…</p>
</div>
<div class="paragraph">
<p>Pour le mock de serveur, j’ai créé une classe <code>MockSMTPRule</code> qui étend la classe abstraite <a href="http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/ExternalResource.html"><code>ExternalResource</code></a>. Cette classe fournit deux méthodes <code>before</code> et <code>after</code> qui s’exécutent respectivement avant et après la méthode de test ; parfait donc pour gérer des ressources externe au test.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class MockSMTPRule extends ExternalResource
{
     public SimpleSmtpServer server;

    /** Lance le serveur SMTP sur le port 2525 avant le test */
    protected void before() throws Throwable
    {
        super.before();
        server = SimpleSmtpServer.start(2525);
    }

    /** Arrête le serveur une fois le test terminé */
    protected void after()
    {
        server.stop();
        super.after();
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Il faudra également configurer l’application web pour utiliser le serveur qui sera lancé sur localhost, port 2525.</p>
</div>
<div class="paragraph">
<p>Ensuite, utiliser cette <code>TestRule</code> dans un test est extrêmement simple. Il suffit de créer une variable d’instance publique dans la classe de test et de la préfixer avec l’annotation <code>@Rule</code>.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class RegistrationTest extends JUnit4TestBase
{
    @Rule
    public MockSMTPRule smtp = new MockSMTPRule();

    /** Test the registration */
    @Test
    public void should_send_confirmation_email()
    {
        /* Ouvrir la page à tester */
        openPage("http://localhost:8080/register/");
        /* Saisir les informations sur le nouvel utilisateur */
        /* ... */
        /* On teste qu'un mail a été reçu */
        assertEquals(1, smtp.server.getReceivedEmailSize());
        SmtpMessage msg = (SmtpMessage) smtp.server.getReceivedEmail().next();
        /* On teste les champs To, From et Subject */
        assertEquals("[Service Trop Bien] Confirmation de votre inscription", msg.getHeaderValue("Subject"));
        assertEquals("john@example.com", msg.getHeaderValue("To"));
        assertEquals("no-reply@servicetropbien.com", msg.getHeaderValue("From"));
        /* On teste le corps du mail */
        assertTrue(msg.getBody().contains("Bienvenue"));
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le code complet de la classe est ici : <a href="https://gist.github.com/3246719" class="bare">https://gist.github.com/3246719</a></p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/08/05/Mocker-un-serveur-de-mail-avec-Dumbster-et-J-Uit.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/08/05/Mocker-un-serveur-de-mail-avec-Dumbster-et-J-Uit.html</guid><category><![CDATA[java]]></category><category><![CDATA[ junit]]></category><category><![CDATA[ mock]]></category><category><![CDATA[ qualite]]></category><category><![CDATA[ test]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 05 Aug 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Exclure certaines classes de la couverture des tests unitaires]]></title><description><![CDATA[<div class="paragraph">
<p>Dans nos projets on rencontre souvent ce cas de figure : certaines portions de code se prêtent mal aux tests unitaires. Ce sont les interfaces graphiques, le code qui manipule des fichiers, les connexions réseau… Cela peut poser problème lorsqu’on configure Sonar pour lever des alertes quand la couverture de code est trop faible.</p>
</div>
<div class="paragraph">
<p>Le problème a déjà été posé car Il y a un ticket dans le JIRA de Sonar (<a href="http://jira.codehaus.org/browse/SONAR-766">SONAR-766</a>). Quand il aura été résolu Sonar devrait permettre de configurer ce qui doit être exclu de l’analyse de couverture des tests.</p>
</div>
<div class="paragraph">
<p>En attendant comment faire ? En posant la question il y a quelques mois sur Twitter j’avais reçu une réponse de Damien Gouyette :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/sonar-cobertura-tweet-20120130.png" alt="sonar cobertura tweet 20120130.png">
</div>
</div>
<div class="paragraph">
<p>J’ai fini par trouver le temps de tester et ça fonctionne ! Il est possible de régler ces règles d’exclusion en adaptant par la configuration du plugin cobertura dans le POM de notre projet :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;plugin&gt;
  &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
  &lt;artifactId&gt;cobertura-maven-plugin&lt;/artifactId&gt;
  &lt;configuration&gt;
    &lt;instrumentation&gt;
      &lt;excludes&gt;
        &lt;exclude&gt;com/mycompany/gui/**/*.class&lt;/exclude&gt;
        &lt;exclude&gt;com/mycompany/nontestable/**/*.class&lt;/exclude&gt;
      &lt;/excludes&gt;
    &lt;/instrumentation&gt;
  &lt;/configuration&gt;
&lt;/plugin&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>De cette façon les classes correspondant au <em>pattern</em> indiqué sont exclues de l’analyse par cobertura et ainsi ignorées par Sonar. Le taux de couverture est donc calculé sur le code considéré comme testable. La métrique devient alors beaucoup plus intéressante pour l’évaluation de la qualité globale du projet.</p>
</div>
<div class="paragraph">
<p><em>Note</em> : Attention, je parle bien sûr de tests unitaires ; il ne faut pas confondre un code qui ne peut pas être testé unitairement avec un code pour lequel les tests sont possibles mais difficiles à écrire. En outre il est toujours possible de tester autrement, avec des tests d’intégration ou des tests de <em>user experience</em> par exemple.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/01/30/Exclure-certaines-classes-de-la-couverture-des-tests-unitaires.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/01/30/Exclure-certaines-classes-de-la-couverture-des-tests-unitaires.html</guid><category><![CDATA[cobertura]]></category><category><![CDATA[ maven-cobertura-plugin]]></category><category><![CDATA[ sonar]]></category><category><![CDATA[ test]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 30 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Présentation de Dart par Gilad Bracha]]></title><description><![CDATA[<div class="paragraph">
<p>À l’occasion d’une rencontre des utilisateurs de Javascript dans la région de San Fransisco, Gilad Bracha est venu présenter Dart, le nouveau langage pour web conçu par Google.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="380" src="https://www.youtube.com/embed/Ka2iDlhBwYM?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p>Gilad Bracha est ingénieur logiciel chez Google, co-auteur de la spécification du langage Dart. Chez Sun, il a également été co-auteur et mainteneur de la spécification du langage Java ainsi que de la JVM.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/01/26/Presentation-de-Dart-par-Gilad-Bracha.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/01/26/Presentation-de-Dart-par-Gilad-Bracha.html</guid><category><![CDATA[dart]]></category><category><![CDATA[ google]]></category><category><![CDATA[ javascript]]></category><category><![CDATA[ web]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Thu, 26 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Couverture des tests d’intégration avec JaCoCo, Maven et Sonar]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Sur certains de mes projets maven j’aimerai pouvoir séparer les tests unitaires des tests d’intégration. Les tests d’intégration sont souvent moins stables, pas toujours reproductibles et ils prennent souvent trop de temps pour être exécutés par les développeurs à chaque compilation.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_d_placer_les_tests_dans_un_module_d_di">Déplacer les tests dans un module dédié</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Première chose à faire, créer un module dédié dans le projet maven pour y mettre uniquement les tests d’intégration. Voilà la structure globale du projet :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/project-layout1-20120123.png" alt="Project Layout">
</div>
</div>
<div class="paragraph">
<p>Ensuite pour empêcher que le module <code>libfoo-it</code> ne se lance à chaque compilation on crée un profil maven dédié aux test d’intégration dans le fichier <code>pom.xml</code> principal.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;profiles&gt;
  &lt;profile&gt;
    &lt;id&gt;run-its&lt;/id&gt;
    &lt;modules&gt;
      &lt;module&gt;libfoo-it&lt;/module&gt;
    &lt;/modules&gt;
  &lt;/profile&gt;
&lt;/profiles&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_utiliser_maven_failsafe_plugin">Utiliser maven-failsafe-plugin</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Le <a href="http://maven.apache.org/plugins/maven-failsafe-plugin/">plugin failsafe</a> permet de lancer les test d’intégration lors d’un build maven tout comme le plugin surefire le fait avec les tests unitaires. Le plugin failsafe s’attache aux phases <em>integration-test</em> et <em>verify</em> du <a href="http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html">cycle de vie du build</a>.</p>
</div>
<div class="paragraph">
<p>Comme il n’est pas possible de configurer plusieurs répertoires contenant les tests dans maven, la discrimination entre tests unitaires et d’intégration se fait sur le nom des classes. Il ne faudra donc pas oublier de nommer correctement ses classes de test.</p>
</div>
<div class="paragraph">
<p>Les <em>templates</em> par défaut sont les suivants :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><em>tests unitaires</em> : **/*Test.java, **/Test*.java, **/*TestCase.java</p>
</li>
<li>
<p><em>tests d’intégration</em> : **/*IT.java, **/IT*.java, **/*ITCase.java</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>On ajoute ensuite la configuration du plugin failsafe dans notre profil.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;profiles&gt;
  &lt;profile&gt;
    &lt;id&gt;run-its&lt;/id&gt;
    &lt;modules&gt;
      &lt;module&gt;libfoo-it&lt;/module&gt;
    &lt;/modules&gt;
    &lt;build&gt;
      &lt;pluginManagement&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.11&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;goals&gt;
                  &lt;goal&gt;integration-test&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/pluginManagement&gt;
    &lt;/build&gt;
  &lt;/profile&gt;
&lt;/profiles&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le POM du sous-projet libfoo-it est également à mettre à jour. De cette façon, petite optimisation, le plugin failsafe ne sera lancé que dans le module qui contient les tests d’intégration.</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[/~]$ mvn -Prun-its clean verify</pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_couverture_de_code_avec_jacoco">Couverture de code avec JaCoCo</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Avoir des tests c’est bien, calculer la couverture de ces tests c’est mieux. Pour cela nous allons utiliser le moteur de couverture de code <a href="http://www.eclemma.org/jacoco/">JaCoCo</a> (Java Code Coverage), plus adapté aux tests d’intégration que le bien connu Cobertura.</p>
</div>
<div class="paragraph">
<p>JaCoCo est fournit sous la forme d’un agent à lancer avec la JVM. Heureusement, il existe un plugin maven pour JaCoCo qui va nous aider à l’intégrer dans le build. Le plugin maven JaCoCo dispose d’un goal <em>prepare-agent</em> qui va dans un premier temps télécharger l’agent et dans un second temps créer une variable maven contenant la configuration de l’agent qu’il suffira de passer en paramètre au plugin failsafe.</p>
</div>
<div class="paragraph">
<p>Voilà ce que donne la configuration du plugin (<em>Nota</em>: j’utilise la version 5.3 du plugin JaCoCo car les versions suivantes ne semblent pas fonctionner avec maven 2.2.1) :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;profiles&gt;
  &lt;profile&gt;
    &lt;id&gt;run-its&lt;/id&gt;
    &lt;modules&gt;
      &lt;module&gt;libfoo-it&lt;/module&gt;
    &lt;/modules&gt;
    &lt;build&gt;
      &lt;pluginManagement&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jacoco-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.5.3.201107060350&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;phase&gt;pre-integration-test&lt;/phase&gt;
                &lt;goals&gt;
                  &lt;goal&gt;prepare-agent&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
              &lt;propertyName&gt;it.failsafe.argLine&lt;/propertyName&gt;
              &lt;destFile&gt;${it.jacoco.destFile}&lt;/destFile&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
          &lt;plugin&gt;
            &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.11&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;goals&gt;
                  &lt;goal&gt;integration-test&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
              &lt;argLine&gt;${it.failsafe.argLine}&lt;/argLine&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/pluginManagement&gt;
    &lt;/build&gt;
    &lt;properties&gt;
      &lt;it.jacoco.destFile&gt;${java.io.tmpdir}/jacoco-foo.dump&lt;/it.jacoco.destFile&gt;
    &lt;/properties&gt;
  &lt;/profile&gt;
&lt;/profiles&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le plugin JaCoCo va générer la configuration de l’agent pour lancer les tests et la placer dans variable <code>it.failsafe.argLine</code>. Ensuite on configure le paramètre <code>argLine</code> du plugin failsafe avec cette variable. On définit également le fichier qui va collecter les données de couverture (avec paramètre <code>destFile</code>).</p>
</div>
<div class="paragraph">
<p>Il faut également mettre à jour le POM du module contenant les tests :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;build&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
      &lt;artifactId&gt;maven-jacoco-plugin&lt;/artifactId&gt;
    &lt;/plugin&gt;
    &lt;plugin&gt;
      &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/build&gt;</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_couverture_avec_sonar">Couverture avec Sonar</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maintenant que nous avons nos données de couverture dans un fichier, il serait intéressant de les faire digérés à Sonar lors de son analyse. Depuis la version 2.12, <a href="http://www.sonarsource.org/">Sonar</a> est livré avec le plugin JaCoCo ; pour les précédentes il faudra l’installer depuis l’<em>update center</em>.</p>
</div>
<div class="paragraph">
<p>Le plugin JaCoCo de Sonar attend à trouver le chemin vers le fichier de collecte des données dans la variable <code>sonar.jacoco.itReportPath</code>. Il est possible de configurer ce chemin dans l’interface web de Sonar (menu <em>settings</em>, catégorie <em>JaCoCo</em>, paramètre <em>File with execution data for integration tests</em>) mais cette variable peut également être configurée dans le POM.</p>
</div>
<div class="paragraph">
<p>Voilà donc la version définitive du profil :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;profiles&gt;
  &lt;profile&gt;
    &lt;id&gt;run-its&lt;/id&gt;
    &lt;modules&gt;
      &lt;module&gt;libfoo-it&lt;/module&gt;
    &lt;/modules&gt;
    &lt;build&gt;
      &lt;pluginManagement&gt;
        &lt;plugins&gt;
          &lt;plugin&gt;
            &lt;groupId&gt;org.jacoco&lt;/groupId&gt;
            &lt;artifactId&gt;maven-jacoco-plugin&lt;/artifactId&gt;
            &lt;version&gt;0.5.3.201107060350&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;phase&gt;pre-integration-test&lt;/phase&gt;
                &lt;goals&gt;
                  &lt;goal&gt;prepare-agent&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
              &lt;propertyName&gt;it.failsafe.argLine&lt;/propertyName&gt;
              &lt;destFile&gt;${it.jacoco.destFile}&lt;/destFile&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
          &lt;plugin&gt;
            &lt;artifactId&gt;maven-failsafe-plugin&lt;/artifactId&gt;
            &lt;version&gt;2.11&lt;/version&gt;
            &lt;executions&gt;
              &lt;execution&gt;
                &lt;goals&gt;
                  &lt;goal&gt;integration-test&lt;/goal&gt;
                &lt;/goals&gt;
              &lt;/execution&gt;
            &lt;/executions&gt;
            &lt;configuration&gt;
              &lt;argLine&gt;${it.failsafe.argLine}&lt;/argLine&gt;
            &lt;/configuration&gt;
          &lt;/plugin&gt;
        &lt;/plugins&gt;
      &lt;/pluginManagement&gt;
    &lt;/build&gt;
    &lt;properties&gt;
      &lt;it.jacoco.destFile&gt;${java.io.tmpdir}/jacoco-foo.dump&lt;/it.jacoco.destFile&gt;
      &lt;sonar.jacoco.itReportPath&gt;${it.jacoco.destFile}&lt;/sonar.jacoco.itReportPath&gt;
    &lt;/properties&gt;
  &lt;/profile&gt;
&lt;/profiles&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Il ne reste plus qu’à lancer l’analyse avec Sonar :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>[/~]$ mvn -Prun-its clean verify sonar:sonar</pre>
</div>
</div>
<div class="paragraph">
<p>Finalement, après avoir ajouté le widget Integration test coverage dans le dashboard, on obtient ce résultat :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/sonar-coverage-it-20120123.png" alt="Code coverage avec Sonar">
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_pistes_d_am_liorations">Pistes d’améliorations</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Cette solution est un peu brute de décoffrage et pour dire vrai entre le début de l’écriture de ce post et maintenant j’ai eu quelques idées pour l’améliorer :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Passer la configuration du profil dans un super POM dont héritent tous les projets. En effet, mis à part le paramètre <code>destFile</code> il n’y a rien de spécifique dans cette configuration. On pourrait même imaginer la génération d’un nom de fichier aléatoire à chaque lancement.</p>
</li>
<li>
<p>Utiliser plusieurs modules de tests d’intégration. Pour cela il faut mettre le paramètre supplémentaire <code>append</code> à <em>true</em> dans le plugin maven JaCoCo afin que les données d’exécution de tous les modules soient collectées dans le même fichier.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Et si vous avez d’autres idées, n’hésitez pas à les poster dans les commentaires.</p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2012/01/23/Couverture-des-tests-dintegration-avec-JaCo-Co-Maven-et-Sonar.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2012/01/23/Couverture-des-tests-dintegration-avec-JaCo-Co-Maven-et-Sonar.html</guid><category><![CDATA[cobertura]]></category><category><![CDATA[ code coverage]]></category><category><![CDATA[ JaCoCo]]></category><category><![CDATA[ maven]]></category><category><![CDATA[ maven-failsafe-plugin]]></category><category><![CDATA[ maven-jacoco-plugin]]></category><category><![CDATA[ sonar]]></category><category><![CDATA[ test]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 23 Jan 2012 00:00:00 GMT</pubDate></item><item><title><![CDATA[Les classes internes ou la tambouille du compilateur Java]]></title><description><![CDATA[<div class="paragraph">
<p>Il y a quelques mois Olivier Croisier a publié sur son blog <a href="http://thecodersbreakfast.net/">The Coder’s Breakfast</a> (que tout développeur Java se doit de suivre) un article intitulé <a href="http://thecodersbreakfast.net/index.php?post/2011/09/26/Inner-classes-and-the-myth-of-the-default-constructor">Inner classes and the myth of the default constructor</a>. Dans cet article il est question des classes internes et des constructeurs « cachés » ajoutés lors de la phase de compilation.</p>
</div>
<div class="paragraph">
<p>Prenons ce morceau de code :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        new Inner();
    }
    public class Inner {}
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et regardons le bytecode des constructeurs généré par le compilateur :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: pop
   13: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return</pre>
</div>
</div>
<div class="paragraph">
<p>La class <code>Inner</code> s’est vue ajouter un constructeur qui prend un paramètre de type <code>Outer</code> et quand <code>Outer</code> appelle ce constructeur il passe this en paramètre (l’instruction <code>aload $0</code> charge <code>this</code> sur la pile juste avant l’appel du constructeur).</p>
</div>
<div class="paragraph">
<p>En fait la classe interne est vue comme n’importe quelle autre classe. Pour lui permettre d’accès à la classe englobante il lui faut un pointeur vers l’instance de cette classe. Ce pointeur lui est passé en paramètre dans un constructeur ajouté à la compilation.</p>
</div>
<div class="paragraph">
<p>Allons un peu plus loin. Si la classe interne n’est pas différente des autres classes alors que ce passe-t-il quand la classe englobante veut accéder à une méthode <code>private</code> de la classe interne ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
        inner.hello();
    }
    public class Inner {
        private void hello() {
            System.out.println("Hello World");
        }
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et le bytecode :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: astore $1
   13: aload $1
   14: invokestatic Outer$Inner.access$000 {(Outer$Inner) -&gt; void}
   17: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return

**** hello () -&gt; void
    0: getstatic java/lang/System.out {java.io.PrintStream}
    3: ldc "Hello World"
    5: invokevirtual java/io/PrintStream.println {(java.lang.String) -&gt; void}
    8: return

**** access$000 (Outer$Inner) -&gt; void
    0: aload $0
    1: invokespecial Outer$Inner.hello {() -&gt; void}
    4: return</code></pre>
</div>
</div>
<div class="paragraph">
<p>La méthode <code>hello</code> est privée et donc Outer ne peut pas l&#8217;appeler directement. Dans ce le compilateur a ajouté une méthode package statique void <code>access$000(Inner)</code> qui sert alors de proxy. Cette méthode se contente alors de rediriger l&#8217;appel vers le méthode <code>hello</code>. Dans le code de l&#8217;appelant l&#8217;appel à la méthode privée est simplement remplacé par un appel à la méthode statique correspondante.</p>
</div>
<div class="paragraph">
<p>Dans le cas de l&#8217;accès à un champ privé, le résultat est très similaire :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
        String hello = inner.hello;
    }
    public class Inner {
        private String hello = "Hello World";
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
   12: astore $1
   13: aload $1
   14: invokestatic Outer$Inner.access$000 {(Outer$Inner) -&gt; java.lang.String}
   17: astore $2
   18: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: aload $0
   10: ldc "Hello World"
   12: putfield Outer$Inner.hello {java.lang.String}
   15: return

**** access$000 (Outer$Inner) -&gt; java.lang.String
    0: aload $0
    1: getfield Outer$Inner.hello {java.lang.String}
    4: areturn</code></pre>
</div>
</div>
<div class="paragraph">
<p>Dans ce cas aussi, l&#8217;accès au champ privé <code>hello</code> n&#8217;est pas possible directement. Le compiltateur a donc ajouté une méthode package statique <code>String access$000(Inner)</code> qui lit le champ (opcode <code>getfield</code>) et le renvoie à l&#8217;appelant.</p>
</div>
<div class="paragraph">
<p>Et dans le cas d&#8217;un constructeur privé ? Vat-t-on se retrouver avec une méthode statique de type <em>factory</em> qui va instancier l&#8217;object qu&#8217;on cherche à construire ? Non, ici le compilateur opte pour une autre stratégie :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public class Outer
{
    public Outer() {
        Inner inner = new Inner();
    }
    public class Inner {
        private Inner() {}
    }
}</code></pre>
</div>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>// Outer.class
**** &lt;init&gt; () -&gt; void
    0: aload $0
    1: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    4: new Outer$Inner
    7: dup
    8: aload $0
    9: aconst_null
   10: invokespecial Outer$Inner.&lt;init&gt; {(Outer, Outer$1) -&gt; void}
   13: astore $1
   14: return

// Outer$Inner.class
**** &lt;init&gt; (Outer) -&gt; void
    0: aload $0
    1: aload $1
    2: putfield Outer$Inner.this$0 {Outer}
    5: aload $0
    6: invokespecial java/lang/Object.&lt;init&gt; {() -&gt; void}
    9: return

**** &lt;init&gt; (Outer, Outer$1) -&gt; void
    0: aload $0
    1: aload $1
    2: invokespecial Outer$Inner.&lt;init&gt; {(Outer) -&gt; void}
    5: return</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le compilateur ajoute un second constructeur qui prend deux paramètres : le pointeur vers l&#8217;instance de la classe englobante et un paramètre de type <code>Outer$1</code>. Quelle est ce type ? Il s&#8217;agit d&#8217;une interface sans méthode créée automatiquement à la compilation. Cette interface sert simplement différencier les deux constructeurs (le second constructeur se contente d&#8217;appeler le premier). Lors de l&#8217;appel de ce constructeur ce second paramètre est mis à null (<code>null</code> est chargé sur la pile par l&#8217;opcode <code>aconst_null</code>).</p>
</div>
<div class="paragraph">
<p>Le problème principal de ces différentes <em>ruses</em> du compilateur est que cela peut rendre les stacktraces difficilement lisibles si on fait un usage immodéré des classes internes. Il vaut mieux également éviter d&#8217;appeler des méthodes privées depuis la classe englobante. L&#8217;analyseur de code <a href="http://pmd.sourceforge.net/">PMD</a> définit d&#8217;ailleurs une règle <a href="http://pmd.sourceforge.net/rules/design.html">AccessorClassGeneration</a> qui lève une alerte quand un constructeur privé est appelé depuis la classe englobante.</p>
</div>
<div class="paragraph">
<p>Et que se passe-t-il si on tente d&#8217;accéder à une méthode privée de la classe englobante depuis la classe interne ? Je vous laisse expérimenter :D.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/12/26/Les-classes-internes-ou-la-tambouille-du-compilateur-Java.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/12/26/Les-classes-internes-ou-la-tambouille-du-compilateur-Java.html</guid><category><![CDATA[bytecode]]></category><category><![CDATA[ compiler]]></category><category><![CDATA[ java]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 26 Dec 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Video : Deep Dive into Android Security]]></title><description><![CDATA[<div class="paragraph">
<p><span class="image"><img src="https://jcsirot.github.io/hubpress.io/images/posts/android-security-20111126.jpg" alt="android security 20111126.jpg"></span></p>
</div>
<div class="paragraph">
<p>Si vous chercher à mieux comprendre le fonctionnement du modèle de sécurité Android je vous conseille fortement de regarder cette vidéo. Dans cette excellente session de la conférence <a href="http://www.andevcon.com/">AndDevCon II</a> <a href="http://marakana.com/expert/aleksandar_gargenta,1.html">Aleksandar Gargenta</a> présente différents aspects liés à la sécurité sur Android (le <em>sandboxing</em> des applications, le fonctionnement du système de permissions, le chiffrement et la protection des données, etc) mais il parle également des limites du modèle et des contre-mesures contre les menaces (signature des applications, <em>rooting</em> &amp; <em>rootkits</em>, SE-Linux, etc).</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="360" src="https://www.youtube.com/embed/tKJiSjVk8NA?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>
<div class="paragraph">
<p><iframe src="//www.slideshare.net/slideshow/embed_code/key/F7Y3TS2ONEobGf" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/marakana/deep-dive-into-android-security-10123665" title="Deep Dive Into Android Security" target="_blank">Deep Dive Into Android Security</a> </strong> de <strong><a href="//www.slideshare.net/marakana" target="_blank">Marakana Inc.</a></strong> </div></p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/11/26/Video-Deep-Dive-into-Android-Security.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/11/26/Video-Deep-Dive-into-Android-Security.html</guid><category><![CDATA[android]]></category><category><![CDATA[ conference]]></category><category><![CDATA[ google]]></category><category><![CDATA[ security]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 26 Nov 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[GTAC 2011 : les vidéos sont en ligne]]></title><description><![CDATA[<div class="paragraph">
<p>Intéressés par la qualité et le test logiciel ? Les vidéos des différentes sessions de la conférence GTAC 2011 sont désormais disponibles sur <a href="http://www.gtac.biz/talks" class="bare">http://www.gtac.biz/talks</a> ou sur la chaîne Youtube <a href="http://www.youtube.com/user/GoogleTechTalks">Google Tech Talks</a>. Bon visionnage !</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/11/24/GTAC-2011-les-videos-sont-en-ligne.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/11/24/GTAC-2011-les-videos-sont-en-ligne.html</guid><category><![CDATA[conference]]></category><category><![CDATA[ google]]></category><category><![CDATA[ quality]]></category><category><![CDATA[ test]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Thu, 24 Nov 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Améliorer la sécurité du développement avec Git]]></title><description><![CDATA[<div class="paragraph">
<p>Quand on développe un produit de sécurité (firewall, VPN, application de chiffrement…) on cherche a donner confiance dans son produit et on est bien souvent amené pour cela à passer des certifications (<a href="http://www.ssi.gouv.fr/fr/certification-qualification/cspn/">CSPN</a>, <a href="http://www.commoncriteriaportal.org/">Critères Communs</a>, etc) et à ainsi prouver qu’on applique de «bonnes pratiques» de matière développement : gestion des bugs, tests, utilisation d’un SCM. Un point important est de montrer que le code source du produit est maîtrisé, c’est à dire qu’aucune modification, intentionnelle ou non, ne peut être intégrée au produit sans avoir été validé. Et pour cela <a href="http://git-scm.com/">Git</a> est un outil qui peut réellement aider.</p>
</div>
<div class="paragraph">
<p>Subversion, probablement le SCM le plus utilisé aujourd’hui, impose un modèle de développement centralisé. Tous les développeurs poussent leurs modifications vers un unique dépôt central partagé. Ce modèle a plusieurs inconvénients quand on désire tracer les modifications dans la base de code.</p>
</div>
<div class="paragraph">
<p>D’abord il faut donner aux développeurs des droits d’accès suffisamment fins pour qu’ils puissent <em>commiter</em> dans le dépôt, sans pour autant les autoriser à avoir accès à toute la base de code, tant en écriture qu’en lecture. Ensuite il faut suivre les modifications apportées au code par les équipes de développement. Il est possible de développer les nouvelles fonctionnalités ou corriger les bugs dans des branches, avec tous les problèmes de <em>merge</em> qui peuvent survenir. On peut également forcer l’utilisation du numéros de référence d’un ticket du <em>bugtracker</em> dans les messages de commits. Dans ce cas il faudra bien sûr compter avec les erreurs sur le numéro du ticket ou les oublis mais également avec la relecture de complexes et multiples <em>diff</em>… Et je ne parle pas de l’historique du dépôt qui devient simplement illisible.</p>
</div>
<div class="paragraph">
<p>Avec Git, le problème du workflow disparaît car vous pouvez l’adapter à votre façon de développer. On peut illustrer ça avec l’exemple du <a href="http://fr.wikipedia.org/wiki/Processus_de_d%C3%A9veloppement_de_Linux">modèle de développement du noyau Linux</a> (schéma ci-dessous) : un développeur privilégié (le dictateur) est autorisé à écrire dans le dépôt de référence (<em>blessed repository</em>). Les développeurs clonent ce dépôt, et poussent leurs patchs vers des «développeurs de confiance» (les lieutenants). Les lieutenants valident ces modifications, le dictateur peut alors venir les chercher auprès des lieutenants. Le dictateur décide alors d’intégrer ou non ces modifications dans le dépôt de référence.</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/workflow-git-20111121.png" alt="workflow git 20111121.png">
</div>
</div>
<div class="paragraph">
<p>En outre, avec Git finis les multiples <em>commits</em> pour implémenter une fonctionnalité : grâce au merge de branches et au rebase, le développeur est en mesure de ne livrer qu’un unique <em>commit</em>. De cette façon l’historique du dépôt est clair et propre mais surtout cela simplifie énormément la revue de code.</p>
</div>
<div class="paragraph">
<p>Pour finir j’ajoute également que Git permet de signer les <em>tags</em> permettant ainsi de garantir l’origine de toutes les modifications du code importées dans le dépôt de référence.</p>
</div>
<div class="paragraph">
<p>En conclusion je terminerai sur le fait que ce que je raconte ici sur Git est également vrai pour d’autres DVCS tels que <a href="http://mercurial.selenic.com/">Mercurial</a> ou <a href="http://bazaar.canonical.com/">Bazaar</a> (à vérifier tout de même pour la signature des tags).</p>
</div>
<div class="paragraph">
<p>Quelques références :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://nvie.com/posts/a-successful-git-branching-model/">A successful Git branching model</a></p>
</li>
<li>
<p><a href="http://fr.whygitisbetterthanx.com/">Pourquoi Git est Meilleur Que X</a> (d’où est issu le schéma d’exemple de workflow)</p>
</li>
<li>
<p><a href="http://fr.wikipedia.org/wiki/Processus_de_d%C3%A9veloppement_de_Linux">Processus de développement de Linux</a></p>
</li>
</ul>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/11/21/0901-Ameliorer-la-securite-du-developpement-avec-Git.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/11/21/0901-Ameliorer-la-securite-du-developpement-avec-Git.html</guid><category><![CDATA[DVCS]]></category><category><![CDATA[ git]]></category><category><![CDATA[ security]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 21 Nov 2011 08:01:00 GMT</pubDate></item><item><title><![CDATA[Changement du thème]]></title><description><![CDATA[<div class="paragraph">
<p>Ne soyez pas étonnés si le site à changé de tête ; suite à une mise à jour hasardeuse (faire une mise à jour sans réfléchir est presque aussi stupide que que ne pas la faire) le thème que j’utilisais n’est plus compatible avec la version actuelle.</p>
</div>
<div class="paragraph">
<p>Bref, plutôt que garder un thème dégradé j’ai préféré basculer sur le thème par défaut de WordPress… Le temps de régler le problème. Mais finalement, ce thème, je l’aime bien ; il est sobre et lisible même s’il lui manque toutefois quelques fonctionnalités que je trouvais bien pratique comme l’ouverture des images dans un popup javascript.</p>
</div>
<div class="paragraph">
<p>Finalement, garder le thème actuel, remettre l’ancien, régler les problèmes de la mise à jour ou installer une tout nouveau thème ? La décision n’est pas encore prise, je verrai à l’usage.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/09/26/1651-Changement-du-theme.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/09/26/1651-Changement-du-theme.html</guid><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 26 Sep 2011 14:51:00 GMT</pubDate></item><item><title><![CDATA[La cryptographie à clé publique par ses inventeurs]]></title><description><![CDATA[<div class="paragraph">
<p><a href="http://fr.wikipedia.org/wiki/Ronald_Rivest">Ron Rivest</a>, <a href="http://fr.wikipedia.org/wiki/Adi_Shamir">Adi Shamir</a>, <a href="http://fr.wikipedia.org/wiki/Leonard_Adleman">Leonard Adleman</a>, <a href="http://fr.wikipedia.org/wiki/Whitfield_Diffie">Whitfield Diffie</a>, <a href="http://fr.wikipedia.org/wiki/Martin_Hellman">Martin Hellman</a>, <a href="http://fr.wikipedia.org/wiki/Ralph_Merkle">Ralph Merkle</a>. Dans les années 70 en découvrant la cryptographie à clé publique ils ont révolutionné le monde. Télécommunications, commerce électronique, cartes bancaires, téléphonie mobile, VIGIK®… Nous utilisons tous et tous les jours leurs découvertes, souvent même sans le savoir.</p>
</div>
<div class="paragraph">
<p>Dans cette courte vidéo diffusée à l’ouverture de la <a href="http://www.rsaconference.com/2011/usa/">conférence RSA 2011</a>, les acteurs de cette révolution en racontent la genèse.</p>
</div>
<div class="videoblock">
<div class="content">
<iframe width="640" height="480" src="https://www.youtube.com/embed/mvOsb9vNIWM?rel=0" frameborder="0" allowfullscreen></iframe>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/08/06/La-cryptographie-a-cle-publique-par-ses-inventeurs.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/08/06/La-cryptographie-a-cle-publique-par-ses-inventeurs.html</guid><category><![CDATA[cryptography]]></category><category><![CDATA[ RSA]]></category><category><![CDATA[ security]]></category><category><![CDATA[ video]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 06 Aug 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[SSL/TLS : un problème fréquent]]></title><description><![CDATA[<div class="paragraph">
<p>Je viens de lire un post très intéressant sur le blog de <a href="http://www.ippon.fr/">Ippon Technologies</a> qui met en lumière l’importance de la notion de chaîne de certificats.</p>
</div>
<div class="paragraph">
<p>Le <a href="http://fr.wikipedia.org/wiki/X.509">standard X.509</a> est basé sur un modèle de confiance pyramidal :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/X509TrustModel-20110723.png" alt="Modèle de confiance X.509">
</div>
</div>
<div class="paragraph">
<p>En haut ce sont les racines de confiance (<em>trust anchors</em>), en bas les certificats des utilisateurs finaux (<em>end entity</em>) et au milieu on trouve les certificats des autorités de certification intermédiaires. Il faut garder à l’esprit que celui qui valide un certificat ne possède en général que la racine de confiance ; mais pour effectuer la validation il faut disposer de la chaîne de certificats au complet, c’est à dire le certificat final avec l’ensemble des certificats des autorités intermédiaires. Moralité : un certificat seul ne sert à rien, il faut toujours considérer la chaîne dans son ensemble.</p>
</div>
<div class="paragraph">
<p>L’article sur le blog de Ippon : <a href="http://blog.ippon.fr/2011/07/23/pourquoi-firefox-ou-java-ne-reconnaissent-pas-ce-certificat-ssl-si-cherement-payee/" class="bare">http://blog.ippon.fr/2011/07/23/pourquoi-firefox-ou-java-ne-reconnaissent-pas-ce-certificat-ssl-si-cherement-payee/</a></p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/07/23/1659-SSLTLS-un-probleme-frequent.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/07/23/1659-SSLTLS-un-probleme-frequent.html</guid><category><![CDATA[HTTPS]]></category><category><![CDATA[ java]]></category><category><![CDATA[ SSL]]></category><category><![CDATA[ TLS]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 23 Jul 2011 14:59:00 GMT</pubDate></item><item><title><![CDATA[Git pour les imbéciles comme moi]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Git, je n’y comprenais rien. Et puis j’ai vu la présentation de Sébastien Douche (<a href="http://twitter.com/sdouche">twitter</a>, <a href="http://douche.name/blog/">blog</a>) au Paris JUG et les choses alors sont devenues beaucoup plus claires. Cette présentation doit absolument être vue par tous les développeurs qui utilisent un logiciel de gestion de source (donc <em>tous</em> les développeurs). Ce qui me désole le plus c’est qu’avant j’étais heureux dans l’ignorance ; désormais je souffre quand je dois utiliser subversion…</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_les_concepts">Les concepts</h2>
<div class="sectionbody">
<div class="paragraph">
<p><div data-parleys-presentation="soiree-git-1-2-les-concepts" style="width:100%;height:300px"><script type = "text/javascript" src="//parleys.com/js/parleys-share.js"></script><a href="https://www.parleys.com/play/soiree-git-1-2-les-concepts">Watch on Parleys.com</a></div></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_la_pratique">La pratique</h2>
<div class="sectionbody">
<div class="paragraph">
<p><div data-parleys-presentation="soiree-git-2-2-en-pratique" style="width:100%;height:300px"><script type = "text/javascript" src="//parleys.com/js/parleys-share.js"></script><a href="https://www.parleys.com/play/soiree-git-2-2-en-pratique">Watch on Parleys.com</a></div></p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/07/17/Git-pour-les-imbeciles-comme-moi.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/07/17/Git-pour-les-imbeciles-comme-moi.html</guid><category><![CDATA[DVCS]]></category><category><![CDATA[ git]]></category><category><![CDATA[ JUG]]></category><category><![CDATA[ parleys]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 17 Jul 2011 00:00:00 GMT</pubDate></item><item><title><![CDATA[Java 7 : les nouveautés côté sécurité]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>La sortie de Java 7 est imminente et on a déjà beaucoup parlé des grandes nouveautés de cette version (multi-catch, opérateur diamant, Fork/Join, opcode <em>invokedynamic</em>…). Mais Java 7 arrive également des tas de petites améliorations, nouveautés et corrections de bugs. Voilà donc un petit résumé des principales nouveautés de Java 7, côté sécurité.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cryptographie_sur_les_courbes_elliptiques">Cryptographie sur les Courbes Elliptiques</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Java 7 est désormais livré avec le provider <code>SunEC</code> (<code>sun.security.ec.SunEC</code>) dédie à la cryptographie sur courbes elliptiques et fournissant un support natif à travers la bibliothèque <code>sunecc</code>. Jusqu’à présent la cryptographie sur courbes elliptique n’était disponible que par le provider <code>SunPKCS11</code> sous réserve de posséder un dispositif supportant ces algorithmes (carte à puce…) ou en utilisant le provider <a href="http://www.bouncycastle.org/">Bouncy Castle</a>.</p>
</div>
<div class="paragraph">
<p>Par exemple, obtenir un objet <code>Signature</code> pour l’algorithme ECDSA se fait de la façon suivante :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">Signature sg = Signature.getInstance("SHA1withECDSA");
System.out.println(sg.getProvider()); // affiche "SunEC version 1.7"</code></pre>
</div>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_ssl_tls">SSL/TLS</h2>
<div class="sectionbody">
<div class="sect2">
<h3 id="_attaque_contre_les_algorithmes_en_mode_cbc">Attaque contre les algorithmes en mode CBC</h3>
<div class="paragraph">
<p>L’implémentation TLS 1.1 a été mise à jour pour se protéger contre l’attaque décrite dans ce <a href="http://www.openssl.org/~bodo/tls-cbc.txt">document</a>.</p>
</div>
</div>
<div class="sect2">
<h3 id="_contr_le_de_la_session_tls">Contrôle de la session TLS</h3>
<div class="paragraph">
<p>De nouvelles classes et méthodes donnent un contrôle plus fin sur la connection TLS :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://download.java.net/jdk7/docs/api/index.html?javax/net/ssl/X509ExtendedTrustManager.html">X509ExtendedTrustManager</a> (une implémentation de <code>TrsutManager</code>) permet d’accéder aux paramètres de la connection TLS pendant le <em>handshake</em>.</p>
</li>
<li>
<p><a href="http://download.java.net/jdk7/docs/api/javax/net/ssl/SSLParameters.html#setEndpointIdentificationAlgorithm(java.lang.String)">SSLParameters.setEndpointIdentificationAlgorithm</a> permet de définir un algorithme de vérification de l’identité du serveur lors du <em>handshake</em>. Dans les versions précédentes, cette vérification ne se faisait que pour le protocole HTTPS et passait par l’interface <code>HostnameVerifier</code>. Désormais on peut l’effectuer au niveau de la couche TLS ; la bibliothèque standard fournit deux algorithmes de vérification : <code>HTTPS</code> et <code>LDAPS</code>. Malheureusement il ne semble pas possible d’ajouter d’autres algorithmes de vérification.</p>
</li>
<li>
<p>L’utilisation des algorithmes rendus obsolètes (et déconseillés) dans les <a href="http://www.ietf.org/rfc/rfc4346.txt">RFC 4346</a>, <a href="http://www.ietf.org/rfc/rfc5246.txt">RFC 5246</a> et <a href="http://www.ietf.org/rfc/rfc5469.txt">RFC 5469</a> est désormais désactivée par défaut.</p>
</li>
</ul>
</div>
</div>
<div class="sect2">
<h3 id="_support_de_sni">Support de SNI</h3>
<div class="paragraph">
<p>SNI (Server Name Indication) est une extension ajoutée au protocole TLS et définie dans la <a href="http://www.ietf.org/rfc/rfc6066.txt">RFC 6066</a>. Cette extension contient le nom du serveur auquel le client veut accéder dans le message <em>ClientHello</em>. De cette façon le serveur sait immédiatement quel nom a été demandé et peut donc choisir quel certificat envoyer au client. Cela permet de configurer des <em>VirtuatHosts</em> en HTTPS comme on le fait en HTTP. Auparavant chaque serveur HTTPS devait posséder sa propre adresse IP.</p>
</div>
<div class="paragraph">
<p>Il est facile de vérifier si l’extension SNI est supportée en envoyant une requête à l’URL <a href="https://sni.velox.ch" class="bare">https://sni.velox.ch</a> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public static void main(String[] args) throws Exception {
    URL url = new URL("https://alice.sni.velox.ch");
    HttpsURLConnection con = (HttpsURLConnection)url.openConnection();
    BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream()));
    FileWriter writer = new FileWriter("index.html");
    while (true) {
        String line = reader.readLine();
        if (line == null) break;
        writer.append(line);
    }
    writer.close();
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ouvrez ensuite le fichier <code>index.html</code> dans votre navigateur. On change l’URL de la requête en <code>bob.sni.velox.ch</code> ; avec Java 7 cela fonctionne correctement mais Java 6 lève une exception :</p>
</div>
<div class="listingblock">
<div class="content">
<pre>Exception in thread "main" javax.net.ssl.SSLHandshakeException: java.security.cert.CertificateException: No subject alternative DNS name matching bob.sni.velox.ch found.</pre>
</div>
</div>
<div class="paragraph">
<p>En effet, <code>bob.sni.velox.ch</code> est un hôte virtuel, si l’extension SNI n’est pas envoyée lors du <em>handshake</em> alors le serveur utilise l’hôte par défaut qui est <code>alice.sni.velox.ch</code> ; avec java 6 le code client échoue car le nom de l&#8217;hôte ne correspond pas au nom dans le certificat, ce qui explique l’erreur obtenue.</p>
</div>
<div class="paragraph">
<p>Des questions, des remarques, des éclaircissements ? N’hésitez pas poster un commentaire.</p>
</div>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2011/07/14/1735-Java-7-les-nouveautes-cote-securite.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2011/07/14/1735-Java-7-les-nouveautes-cote-securite.html</guid><category><![CDATA[elliptic curve]]></category><category><![CDATA[ ECC]]></category><category><![CDATA[ java]]></category><category><![CDATA[ java7]]></category><category><![CDATA[ security]]></category><category><![CDATA[ SSL]]></category><category><![CDATA[ TLS]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Thu, 14 Jul 2011 15:35:00 GMT</pubDate></item><item><title><![CDATA[Conférence annotations java – compte rendu]]></title><description><![CDATA[<div class="paragraph">
<p>La conférence <em>Annotations Java</em> animée par Olivier Croisier, expert java et auteur du blog <a href="http://thecodersbreakfast.net/">The Coders Breakfast</a>, s’est tenue le 29 juin dernier a eu lieu la dans les locaux de <a href="http://www.zenika.com/">Zénika</a>.</p>
</div>
<div class="paragraph">
<p>Les annotations, je pensais bien connaitre… J’avais tort.</p>
</div>
<div class="paragraph">
<p>Après s’être présenté et avoir présenté Zénika, Olivier commence par un rappel historique : en matière de méta-programmation, il existait déjà l’API <a href="http://java.sun.com/j2se/1.5.0/docs/guide/javadoc/">Doclets</a> qui permet d’ajouter ses propres tags dans les commentaires du code. Les développeurs ont vite détourné cette fonctionnalité, souvent pour permettre la génération automatique de code. A partir de Java 5 sont apparues les annotations.</p>
</div>
<div class="paragraph">
<p>Dans la bibliothèque Java standard on trouve finalement assez peu d’annotations : <code>@Override</code>, <code>@SuppressWarnings</code> et <code>@Deprecated</code> ainsi que quelques unes dans le package <code>java.lang.annotation</code> (des <em>meta-annotations</em>, c’est à dire des annotations que l’on place sur d’autres annotations comme <code>Target</code> ou <code>Retention). Avec Java 6, on en voit arriver d’autres dans les packages `javax.annotation</code> ou <code>javax.xml.bind.annotation</code>. Mais ce sont surtout les frameworks et autres standards qui font la part belle aux annotations : Hibernate, JPA, JDO, Spring, Guice, J2EE6&#8230;&#8203; Le plus souvent il s&#8217;agit de remplacer de longs fichiers de description en XML.</p>
</div>
<div class="paragraph">
<p>Ensuite Olivier nous a présenté la syntaxe et les règles d&#8217;usage des annotations : elles peuvent se placer partout et si on les voit souvent sur des classes, des interfaces ou des méthodes, il est aussi possible d&#8217;annoter les packages en utilisant un fichier <a href="http://java.sun.com/docs/books/jls/third_edition/html/packages.html">package-info.java</a>, les constructeurs, les champs et également les paramètres de méthodes. Les annotations peuvent être paramétrées et ces paramètres peuvent avoir des valeurs par défaut. Valeurs par défaut qui peuvent même être des expressions si tant est que cette expression est résolue à la compilation. Toutefois il existe deux limites : les paramètres des annotations ne peuvent être null (pourquoi ? Personne ne semble vraiment savoir) et on ne peut annoter un élément qu&#8217;avec une seule annotation d&#8217;un même type. Mais il exste une astuce pour contourner le problème : écrire des annotations qui prennent un tableau d&#8217;annotations en paramètre.</p>
</div>
<div class="paragraph">
<p>Puis on passe au développement d&#8217;annotations personnalisées.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public @interface MyAnnotation {
    String aString() default "FooBar";
    int aInteger() default 21 + 21;
}

@MyAnnotation(aString="An arbitrary String", aInteger=27)
public class MyAnnotedClass {
    /* .... */
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quand on a un unique paramètre dans l&#8217;annotation on peut simplifier un peu la syntaxe en nommant ce paramètre <code>value</code> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public @interface MyAnnotation {
    String value();
}

@MyAnnotation("Hello world")
public class MyAnnotedClass {
    /* .... */
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>On peut également annoter nos propres annotations avec les meta-annotations définies dans la bibliothèque standard :</p>
</div>
<div class="ulist">
<ul>
<li>
<p><code>Target</code> indique sur quels éléments on peut placer l&#8217;annotation (classes, méthodes&#8230;&#8203;). Par défaut on peut mettre une annotation partout.</p>
</li>
<li>
<p><code>Retention</code> indique la durée de vie de l&#8217;annotation : présence uniquement dans le code source, dans le bytecode de la classe ou également au runtime.</p>
</li>
<li>
<p><code>Documented</code> indique si l&#8217;annotation apparaitra dans la javadoc.</p>
</li>
<li>
<p>`Inherited indique si l&#8217;annotation est héritée par les sous-classes des classes ou elle est définie. Limitation : on ne peut pas hériter d&#8217;une annotation placée sur un interface en implémentant cette interface.</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Finalement Olivier est passé à des exemples concrets d&#8217;utilisation des annotations.</p>
</div>
<div class="paragraph">
<p>D&#8217;abord à la compilation, les annotations permettent d'étendre les fonctionnalités du compilateur Java. Java 6 propose un mécanisme appelé <em>Pluggable Annotation Processing</em> qui permet de brancher ses propres modules dans le compilateur. Cela se passe dans les packages <code>javax.annotation</code> et <code>javax.annotation.processing</code>. Il suffit d'écire une implémentation de la classe <code>javax.annotation.processing.Processor</code> (ou étendre <code>AbstractProcessor</code>) et de la mettre dans le classpath du compilateur (les implementations de <code>Processor</code> sont découvertes par le compilateur en utilisant le <a href="http://www/docs/java/docs-1.6.0/api/index.html?java/util/ServiceLoader.html">mécanisme de chargement de service</a>). L&#8217;interface <code>Processor</code> permet d&#8217;accéder à l&#8217;<a href="http://fr.wikipedia.org/wiki/Abstract_syntax_tree">AST</a> du code en cours de compilation. Une utilisation possible est la vérification programmatique de règles de design : s&#8217;assurer par exemple que toutes les classes d&#8217;un package annoté implémentent <code>Serializable</code> ou encore que toutes les classes annotées par un <code>@Loadable</code> possède bien une méthode <code>load</code> avec les bons paramètres.</p>
</div>
<div class="paragraph">
<p>Toutefois cette approche d&#8217;extension du compilateur a ses limites : il n&#8217;est pas possible de modifier le code existant (on ne peut qu&#8217;en générer) et certains bugs pouvant être bloquant trainent depuis longtemps (cela semble corrigé dans Java 7).</p>
</div>
<div class="paragraph">
<p>Second exemple, en runtime cette fois, la recherche d&#8217;annotations par introspection. Pour cela il ne faut pas oublier d&#8217;ajouter la méta-annotation <code>@Rentention(RententionPolicy.RUNTIME)</code> pour que celle-ci survive à l&#8217;exécution dans la JVM. Les cas d&#8217;utilisation tournent cette fois plus vers la programmation orientée <em>POJO</em> (plus besoin d&#8217;implémenter telle interface, on appelle les méthodes par introspection en recherchant celles qui sont annotées), le mapping d&#8217;objets java vers autre chose (par exemple java vers base de données avec JPA ou JDO) ou encore la configuration des frameworks (<code>@Inject</code> dans Guice par exemple).</p>
</div>
<div class="paragraph">
<p>En guise de dessert, Olivier nous a proposé une jolie demo d&#8217;injection d&#8217;annotation en runtime dans une classe. Il s&#8217;agit surtout d&#8217;une <em>proof of concept</em> et, de son propre aveux, il n&#8217;a pas trouvé de vrai use case à cela.</p>
</div>
<div class="paragraph">
<p>Les slides de la présentation et les exemples de code sont disponibles sur le <a href="http://blog.zenika.com/index.php?post/2010/07/05/Conf%C3%A9rence:-Les-annotations-enfin-expliqu%C3%A9es-simplement">blog de Zenika</a>.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/07/07/Conference-annotations-java-compte-rendu.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/07/07/Conference-annotations-java-compte-rendu.html</guid><category><![CDATA[conference]]></category><category><![CDATA[ java]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 07 Jul 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Android 2.1 tient la moitié du parc]]></title><description><![CDATA[<div class="paragraph">
<p>Nouvelle <a href="http://developer.android.com/resources/dashboard/platform-versions.html">mise à jour</a> bimensuelle de la part de Google concernant la répartition des différentes versions d’android :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/android_fragmentation-20100617.png" alt="Répartition des version Android" width="370">
</div>
</div>
<div class="paragraph">
<p>Cette fois, c’est fait, android 2.1 passe la barre des 50%. Toutefois il faudra compter avec le déploiement d’android 2.2, aka Froyo, dans les prochains mois (si ce n’est les prochaines semaines).</p>
</div>
<div class="paragraph">
<p>Et pendant ce temps les possesseurs du HTC Hero (dont fait partie votre serviteur) attendent avec une impatience non feinte la mise à jour vers la version 2.1. Elle a été promise, annoncée de nombreuses fois et reportée tout autant… Elle est maintenant prévue pour le 29 juin. J’attends…</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/06/26/Android-21-tient-la-moitie-du-parc.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/06/26/Android-21-tient-la-moitie-du-parc.html</guid><category><![CDATA[android]]></category><category><![CDATA[ google]]></category><category><![CDATA[ hero]]></category><category><![CDATA[ htc]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sat, 26 Jun 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[jsChessboard 0.2 est disponible]]></title><description><![CDATA[<div class="paragraph">
<p>J’ai procédé à la release de la bibliothèque jsChessboard en version 0.2. jsChessboard est une bibliothèque qui permet d’interpréter des parties d’échecs et de dessiner des échiquiers, le tout entièrement en javascript en utilisant le tag <code>&lt;canvas&gt;</code>.</p>
</div>
<div class="paragraph">
<p>Les objectifs fixés pour la version 0.3 :</p>
</div>
<div class="ulist">
<ul>
<li>
<p>fournir un plugin jQuery ;</p>
</li>
<li>
<p>permettre d’afficher les numéros de rangées/colonnes ;</p>
</li>
<li>
<p>permettre la personnalisation des pièces, des couleurs ;</p>
</li>
<li>
<p>avoir un <em>vrai viewer</em> <a href="http://fr.wikipedia.org/wiki/Portable_Game_Notation">PGN</a> en HTML5/javascript</p>
</li>
<li>
<p><strong>ajouter des tests unitaires !</strong></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Le site du projet : <a href="http://jschessboard.com" class="bare">http://jschessboard.com</a></p>
</div>
<div class="paragraph">
<p>Pour voir la bibliothèque en action, il y quelques démos sur le site du projet <a href="http://jschessboard.com/svn/trunk/examples/operagame.html">ici</a>, <a href="http://jschessboard.com/svn/trunk/examples/checkmate.html">là</a> ou encore <a href="http://jschessboard.com/svn/trunk/examples/fen.html">là</a>.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/06/09/js-Chessboard-02-est-disponible.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/06/09/js-Chessboard-02-est-disponible.html</guid><category><![CDATA[javascript]]></category><category><![CDATA[ html5]]></category><category><![CDATA[ chess]]></category><category><![CDATA[ jsChessboard]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 09 Jun 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Vérifier le JIRA avant de faire la release]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p>Quand je coiffe ma casquette de <em>release manager</em> je dois m’assurer que le logiciel que je prépare à affubler d’un joli numéro de version est prêt. Le code n’est pas tout ; il existe une multitude de petits détails à vérifier pour satisfaire les critères de qualité demandés : les tests (unitaires, d’intégration) passent ils ? Le <em>coding style</em> a-t-il été bien respecté ? Les dépendences sont-elles à jour ? Je me suis donc fait une <em>release checklist</em> qui détaille point par point toutes ces tâches.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_automatisez">Automatisez !</h2>
<div class="sectionbody">
<div class="paragraph">
<p>En bon informaticien pragmatique je connais le bug de l’interface chaise-clavier : tout ce qui est fait à la main est une intarissable source de problèmes et il m’arrive parfois de faire une bêtise, ce qui a le don de me mettre de fort mauvaise humeur.</p>
</div>
<div class="paragraph">
<p>Comme je suis -=fainéant=- consciencieux, je cherche donc à automatiser le maximum de tâches. Dans ma checklist se trouve le point suivant : s’assurer que tous les tickets dans le JIRA sont fermés. Mon objectif : annuler le lancement de la release quand cette condition n’est pas remplie.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_jira_par_rpc">JIRA par RPC</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Dans une premier temps il faut accéder à JIRA pour récupérer la liste des issues qui nous intéressent. Pour cela JIRA met à disposition deux interfaces RPC : XML-RPC et SOAP. On utilisera SOAP, non pas par plaisir car je trouve XML-RPC beaucoup plus simple, mais parce que l’API disponible par XML-RPC est moins riche et surtout ne fournit pas la méthode dont on a besoin.</p>
</div>
<div class="paragraph">
<p>Le descripteur WSDL est normalement servit par JIRA. En supposant que JIRA est installé à l’URL <code><a href="http://jira.chelonix.com/" class="bare">http://jira.chelonix.com/</a></code> alors le WSDL peut être téléchargé à l’URL suivante :</p>
</div>
<div class="paragraph">
<p><code><a href="http://jira.chelonix.com/rpc/soap/jirasoapservice-v2?wsdl" class="bare">http://jira.chelonix.com/rpc/soap/jirasoapservice-v2?wsdl</a></code></p>
</div>
<div class="paragraph">
<p>Pour utiliser l’API SOAP de JIRA il va falloir enrichir son pom.xml de quelques dépendances à la bibliothèque <a href="http://ws.apache.org/axis/">Axis</a> de la fondation Apache.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">    &lt;!-- Axis dependencies --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-jaxrpc&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-saaj&lt;/artifactId&gt;
      &lt;version&gt;1.3&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;axis&lt;/groupId&gt;
      &lt;artifactId&gt;axis-wsdl4j&lt;/artifactId&gt;
      &lt;version&gt;1.5.1&lt;/version&gt;
    &lt;/dependency&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Toujours dans le <code>pom.xml</code> on ajoute un appel au plugin axistools-maven-plugin. Lors de la phase <em>generate-sources</em>, le fichier WSDL va être utilisé pour auto-générer les classes du client SOAP.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;
        &lt;artifactId&gt;axistools-maven-plugin&lt;/artifactId&gt;
        &lt;version&gt;1.3&lt;/version&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;axis&lt;/groupId&gt;
            &lt;artifactId&gt;axis&lt;/artifactId&gt;
            &lt;version&gt;1.3&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;configuration&gt;
          &lt;wsdlFiles&gt;
            &lt;wsdlFile&gt;jirasoapservice-v2.wsdl&lt;/wsdlFile&gt;
          &lt;/wsdlFiles&gt;
          &lt;packageSpace&gt;com.atlassian.jira.rpc.soap.client&lt;/packageSpace&gt;
        &lt;/configuration&gt;
        &lt;executions&gt;
          &lt;execution&gt;
            &lt;id&gt;wsdl2java-generation&lt;/id&gt;
            &lt;phase&gt;generate-sources&lt;/phase&gt;
            &lt;goals&gt;
              &lt;goal&gt;wsdl2java&lt;/goal&gt;
            &lt;/goals&gt;
          &lt;/execution&gt;
        &lt;/executions&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Le plugin s’attend à trouver le WSDL dans le répertoire <code>${basedir}/src/main/wsdl</code>. Pensez à l’y mettre ou à modifier la propriété <code>sourceDirectory</code> dans la configuration du plugin.
Une fois que le projet a été configuré, il ne reste plus qu’à coder :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">package com.chelonix.jira.rpc.soap.client;

import com.atlassian.jira.rpc.exception.RemoteException;
import com.atlassian.jira.rpc.soap.client.JiraSoapService;
import com.atlassian.jira.rpc.soap.client.JiraSoapServiceService;
import com.atlassian.jira.rpc.soap.client.JiraSoapServiceServiceLocator;
import com.atlassian.jira.rpc.soap.client.RemoteIssue;
import java.net.URL;

/**
 * A JIRA SOAP client checking for opened issues for a project/version couple.
 */
public class IssueChecker
{
    private static final String URL = "http://jira.chelonix.com/rpc/soap/jirasoapservice-v2";

    public static void main(String[] args)
    {
        try {
            IssueCherker checker = new IssueChecker();
            RemoteIssue[] issues = checker.check(args[0], args[1]);
            for (RemoteIssue issue: issues) {
                System.out.printf("Opened issue: %s", issue.getKey());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private JiraSoapService jiraSoapService;

    public IssueChecker() throws Exception
    {
        JiraSoapServiceService jiraSoapServiceLocator =
            new JiraSoapServiceServiceLocator();
        jiraSoapService = jiraSoapServiceLocator.getJirasoapserviceV2(new URL(URL));
    }

    public RemoteIssue[] check(String projectKey, String version) throws RemoteException
        String token = jiraSoapService.login("login", "password");
        String query = MessageFormat.format(
            "project=''{0}'' AND FixVersion=''{1}'' AND status!=''Closed''",
            project, version);
        return jiraSoapService.getIssuesFromJqlSearch(token, query, 100);
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pour plus de détails, la documentation des services RPC de JIRA est là : <code><a href="http://confluence.atlassian.com/display/JIRA/JIRA+RPC+Services" class="bare">http://confluence.atlassian.com/display/JIRA/JIRA+RPC+Services</a></code></p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_cr_er_des_r_gles">Créer des règles…</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Maintenant qu’on peut savoir s’il reste des issues ouvertes pour un projet/version donné, il faut faire en sorte que l’appel <code>mvn release:prepare</code> échoue quand c’est le cas. Pour cela on va utiliser le plugin <a href="http://maven.apache.org/plugins/maven-enforcer-plugin/)">maven-enforcer-plugin</a>. Ce plugin permet de subordonner la compilation à la vérification d’un certain nombre de contraintes telles que la version de maven, la version du JDK, la présence de certains fichiers, etc.</p>
</div>
<div class="paragraph">
<p>Le plugin permet également d’ajouter ses propres règles. On peut donc en créer une se basant sur la classe <code>IssueChecker</code>.</p>
</div>
<div class="paragraph">
<p>D’abord on ajoute quelques dépendances au pom.xml :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">  &lt;dependencies&gt;
    &lt;!-- Enforcer dependencies --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven.enforcer&lt;/groupId&gt;
      &lt;artifactId&gt;enforcer-api&lt;/artifactId&gt;
      &lt;version&gt;${api.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-project&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-core&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-artifact&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.apache.maven&lt;/groupId&gt;
      &lt;artifactId&gt;maven-plugin-api&lt;/artifactId&gt;
      &lt;version&gt;${maven.version}&lt;/version&gt;
    &lt;/dependency&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.codehaus.plexus&lt;/groupId&gt;
      &lt;artifactId&gt;plexus-container-default&lt;/artifactId&gt;
      &lt;version&gt;1.0-alpha-9&lt;/version&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Puis il faut écrire une implémentation de l’interface <a href="http://maven.apache.org/enforcer/enforcer-api/apidocs/index.html">EnforcerRule</a> :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">package com.chelonix.maven.enforcer.rule;

import java.text.MessageFormat;
import com.atlassian.jira.rpc.exception.RemoteException;
import com.atlassian.jira.rpc.soap.client.RemoteIssue;
import org.apache.maven.enforcer.rule.api.EnforcerRule;
import org.apache.maven.enforcer.rule.api.EnforcerRuleException;
import org.apache.maven.enforcer.rule.api.EnforcerRuleHelper;
import org.codehaus.plexus.component.configurator.expression.ExpressionEvaluationException;

/**
 * Implementation of the EnforcerRule verifying whether there is any remaining unclosed issues.
 */
public class JiraOpenIssuesRule implements EnforcerRule
{
    private boolean shouldIfail = false;

    public void execute(EnforcerRuleHelper helper) throws EnforcerRuleException
    {
        try {
            MavenProject project = (MavenProject)helper.evaluate("${project}");
            String version = project.getVersion();
            String projectKey = (String)helper.evaluate("${jira.project.key}");
            IssueChecker checker = new IssueChecker();
            RemoteIssue[] issues = checker.check(projectKey, version);
            shouldIfail = issues.length &gt; 0;
        } catch (ExpressionEvaluationException e) {
            throw new EnforcerRuleException("Unable to lookup an expression " +
                e.getMessage(), e);
        } catch (RemoteException re) {
            throw new EnforcerRuleException("SOAP Remote exception " +
                re.getMessage(), re);
        }
        if (this.shouldIfail) {
            throw new EnforcerRuleException("Remaining unclosed issues");
        }
    }

    public boolean isCacheable()
    {
        return false;
    }

    public boolean isResultValid(EnforcerRule er)
    {
        return false;
    }

    public String getCacheId()
    {
        return "";
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Pensez à ajouter une propriété <code>jira.project.key</code> indiquant la clé du projet JIRA dans le <code>pom.xml</code> du projet dont on fait la release.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="__et_les_faire_appliquer">… Et les faire appliquer</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Finalement il n’y a plus qu’à appeler le plugin Enforcer lors de la release. Dans le <code>pom.xml</code> du projet à releaser on va ajouter le code suivant :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;build&gt;
    &lt;plugins&gt;
    ...
        &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
          &lt;version&gt;2.0&lt;/version&gt;
          &lt;configuration&gt;
            &lt;preparationGoals&gt;clean verify enforcer:enforce&lt;/preparationGoals&gt;
            &lt;arguments&gt;-Prelease&lt;/arguments&gt;
            &lt;goals&gt;deploy&lt;/goals&gt;
            &lt;autoVersionSubmodules&gt;true&lt;/autoVersionSubmodules&gt;
          &lt;/configuration&gt;
        &lt;/plugin&gt;
    ...
    &lt;plugins&gt;
&lt;build&gt;

&lt;profile&gt;
  &lt;id&gt;releaseVerify&lt;/id&gt;
  &lt;build&gt;
    &lt;plugins&gt;
      &lt;plugin&gt;
        &lt;artifactId&gt;maven-enforcer-plugin&lt;/artifactId&gt;
        &lt;dependencies&gt;
          &lt;dependency&gt;
            &lt;groupId&gt;com.chelonix.maven.enforcer&lt;/groupId&gt;
            &lt;artifactId&gt;jira-rules&lt;/artifactId&gt;
            &lt;version&gt;${jirarules.version}&lt;/version&gt;
          &lt;/dependency&gt;
        &lt;/dependencies&gt;
        &lt;configuration&gt;
          &lt;rules&gt;
            &lt;myCustomRule implementation="com.chelonix.maven.enforcer.rule.JiraOpenIssuesRule"&gt;
              &lt;shouldIfail&gt;false&lt;/shouldIfail&gt;
            &lt;/myCustomRule&gt;
          &lt;/rules&gt;
        &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
  &lt;/build&gt;
&lt;/profile&gt;</code></pre>
</div>
</div>
<div class="paragraph">
<p>Quelques remarques : j’ai créé un profil <code>releaseVerify</code> afin de définir des règles utilisées uniquement lors de la release. Ensuite j’ai ajouté l’appel <code>enforcer:enforce</code> au paramètre de configuration <code>preparationGoals. Ce paramètre permet de définir une liste de <em>goals</em> à exécuter lors de `release:prepare</code>. Par défaut ce sont les goals <code>clean verify</code> qui sont exécutés. Enfin j’ai ajouté le paramètre arguments avec la valeur <code>-PreleaseVerify</code> pour forcer l’usage du profil.</p>
</div>
</div>
</div>
<div class="sect1">
<h2 id="_conclusion">Conclusion</h2>
<div class="sectionbody">
<div class="paragraph">
<p>Désormais toute tentative de release avec des tickets encore ouverts dans le JIRA va échouer. Cela ne me dispense pas de faire la vérification mais me prémunit contre un éventuel oubli. Toutefois le code est encore loin d’être parfait (par exemple il y a un risque de NullPointerException quand <code>jira.project.key</code> n’est pas défini).</p>
</div>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/31/Verifier-le-JIRA-avant-de-faire-la-release.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/31/Verifier-le-JIRA-avant-de-faire-la-release.html</guid><category><![CDATA[jira]]></category><category><![CDATA[ maven]]></category><category><![CDATA[ maven-enforcer-plugin]]></category><category><![CDATA[ maven-release-plugin]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 31 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Crible d’Ératosthène en Scala]]></title><description><![CDATA[<div class="paragraph">
<p>Le <a href="https://fr.wikipedia.org/wiki/Crible_d%27%C3%89ratosth%C3%A8ne">crible d’Ératosthène</a> est un grand classique des langages fonctionnels :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def primes (end: Int): Seq[Int] = {
  def sieve (list: Seq[Int]): Seq[Int] = {
    list match {
      case Nil =&gt; List()
      case x :: xs =&gt; List(x) ++ sieve(xs.filter(_ % x != 0))
    }
  }
  sieve(List.range(2, end))
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Faisons un test :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">scala&gt; primes(100)
res0: Seq[Int] = List(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97)</code></pre>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/20/Crible-d-Eratosthene-en-Scala.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/20/Crible-d-Eratosthene-en-Scala.html</guid><category><![CDATA[scala]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Thu, 20 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Android 2.1 passe en tête]]></title><description><![CDATA[<div class="paragraph">
<p>Google vient de <a href="http://developer.android.com/resources/dashboard/platform-versions.html">mettre à jour</a> ses données concernant la répartition des différentes versions d’android :</p>
</div>
<div class="imageblock">
<div class="content">
<img src="https://jcsirot.github.io/hubpress.io/images/posts/android_fragmentation-20100519.png" alt="Répartition des version Android" width="370">
</div>
</div>
<div class="paragraph">
<p>Ces chiffres ont été collectés à partir des statistiques de connexion à l’Android Market. Voilà ce que cela donne :</p>
</div>
<table class="tableblock frame-topbot grid-all spread">
<colgroup>
<col style="width: 50%;">
<col style="width: 50%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Android Platform</th>
<th class="tableblock halign-left valign-top">Percent of Devices</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.1%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.5</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">34.1%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 1.6</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">28.0%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.0</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.2%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.0.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">0.4%</p></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><p class="tableblock">Android 2.1</p></td>
<td class="tableblock halign-left valign-top"><p class="tableblock">37.2%</p></td>
</tr>
</tbody>
</table>
<div class="paragraph">
<p>C’est en comparant avec les même données du mois dernier que cela devient intéressant : Android 2.1 passe de 27,3% à 37,2% de part de marché, soit une augmentation de presque 10 points. À l’opposé, les versions 1.5 et 1.6 perdent respectivement 3,8 points et 3,6 points. Cela veut surtout dire que la version 2.1 est désormais la version majoritairement déployée sur l’ensemble des terminaux Android.</p>
</div>
<div class="paragraph">
<p>En supposant que ces chiffres soit représentatifs du parc (<a href="http://www.sosandroid.fr/andropress/2010/05/18/android-eclair-2-1-devient-la-principale-version-deployee-3821/">et SOS Android a fait quelques comparaisons et semble le croire</a>), on assiste, lentement mais sûrement, à une concentration des versions diffusées. Les améliorations entre 1.x et les 2.x ayant réellement amélioré la qualité de l’OS, cette concentration est plutôt une bonne nouvelle.</p>
</div>
<div class="paragraph">
<p>À moins que la version 2.2, alias <em>Froyo</em>, ne vienne changer la donne.</p>
</div>
<div class="paragraph">
<p><strong>Update</strong> Après plusieurs mois de rumeurs HTC vient de publier la première mise à jour officielle du Hero (Uniquement chez Sprint pour le moment).</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/19/Android-21-passe-en-tete.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/19/Android-21-passe-en-tete.html</guid><category><![CDATA[android]]></category><category><![CDATA[ google]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Wed, 19 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Quicksort en Scala]]></title><description><![CDATA[<div class="paragraph">
<p>Retour aux racines du génie logiciel : le tri. Tout développeur doit savoir écrire un tri en moins de 5 minutes.</p>
</div>
<div class="paragraph">
<p>Comment faire un quicksort en Scala ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort (list : Seq[Int]) : Seq[Int] = {
  list match {
    case Nil =&gt; list
    case x :: xs =&gt; sort(xs.filter(_ &lt; x)) ++ List(x) ++ sort(xs.filter(_ &gt;= x))
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Ça marche pour les int. Mais si je veux trier des float, des String, des Scoubidou ? Il faudrait généraliser la fonction. Pour cela il existe le trait `Ordered qui permet de définir une relation d’ordre total sur les éléments.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A &lt;% Ordered[A]] (list:Seq[A]): Seq[A] = {
  list match {
    case Nil =&gt; list
    case x :: xs =&gt; sort(xs.filter(_ &lt; x)) ++ List(x) ++ sort(xs.filter(_ &gt;= x))
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>L’expression `[A &lt;% Ordered[A]] est une <em>view bound</em>. Cela permet de définir une fonction polymorphique mais aussi fournit la conversion implicite du type A en Ordered[A]. En fait cette définition :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A &lt;% Ordered[A]] (list:Seq[A]): Seq[A] = { /* ... */ }</code></pre>
</div>
</div>
<div class="paragraph">
<p>est équivalente à :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">def sort [A] (list:Seq[A])(implicit conv: A =&gt; Ordered[A]): Seq[A] = { /* ... */ }</code></pre>
</div>
</div>
<div class="paragraph">
<p>Avantage : l’objet <code>scala.Predef</code> qui est tourjours chargé par Scala possède déjà plusieurs fonctions implicites de converstion par exemple <code>Int</code> vers <code>Ordered[Int]</code>.</p>
</div>
<div class="paragraph">
<p>Et si maintenant nous compararions nos scoubidous ?</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">case class Scoubidou(name: String)
val samy = Scoubidou("Samy")
val daphne = Scoubidou("Daphne")
sort(List(samy, daphne))

&gt; error: no implicit argument matching parameter type (Scoubidou) =&gt; Ordered[Scoubidou] was found.</code></pre>
</div>
</div>
<div class="paragraph">
<p>Et oui, sort attend un <code>Ordered</code>. Bien sûr nous pourrions nous arranger pour que Scoubidou étende le trait Ordered mais parfois ce n’est simplement pas possible, par exemple parce que le type est fournit par une bibliothèque sur laquelle on n’a pas la main. Mais il est possible de définir une fonction implicite de conversion qui trie les Scoubidou selon l’ordre lexicographique (en clair on va déléguer l’appel à compare au champ name).</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">implicit def scoubidou2ordered (x: Scoubidou): Ordered[Scoubidou] = {
  new Ordered[Scoubidou] {
    def compare(that: Scoubidou): Int = {
      x.name.compare(that.name)
    }
  }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>et maintenant on peut trier la liste :</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-scala" data-lang="scala">sort(List(samy, daphne))

&gt; Seq[Scoubidou] = List(Scoubidou(Daphne), Scoubidou(Samy))</code></pre>
</div>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/17/Quicksort-en-Scala.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/17/Quicksort-en-Scala.html</guid><category><![CDATA[scala]]></category><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Mon, 17 May 2010 00:00:00 GMT</pubDate></item><item><title><![CDATA[Le zoo est ouvert]]></title><description><![CDATA[<div class="paragraph">
<p>Le combat fut rude, les erreurs absconses, n’étant pas grand amateur de PHP, mais finalement ce blog est installé. S’il reste encore pas mal de chose à terminer, l’essentiel fonctionne. Reste à avoir des choses à raconter et du temps pour le faire.</p>
</div>]]></description><link>https://jcsirot.github.io/hubpress.io/2010/05/16/Le-zoo-est-ouvert.html</link><guid isPermaLink="true">https://jcsirot.github.io/hubpress.io/2010/05/16/Le-zoo-est-ouvert.html</guid><dc:creator><![CDATA[Jean-Christophe Sirot]]></dc:creator><pubDate>Sun, 16 May 2010 00:00:00 GMT</pubDate></item></channel></rss>